// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Curry from "bs-platform/lib/es6/curry.js";

function $less$$great(f, m) {
  return m.then((function (x) {
                return Promise.resolve(Curry._1(f, x));
              }));
}

function $less$amp$great(m, f) {
  return $less$$great(f, m);
}

function pure(prim) {
  return Promise.resolve(prim);
}

function $great$great$eq(mx, f) {
  return mx.then(Curry.__1(f));
}

function $eq$less$less(f, mx) {
  return mx.then(Curry.__1(f));
}

function mapM(f, xs) {
  if (!xs) {
    return Promise.resolve(/* [] */0);
  }
  var ys = xs[1];
  var mx = Curry._1(f, xs[0]);
  return mx.then((function (z) {
                return $less$$great((function (zs) {
                              return /* :: */[
                                      z,
                                      zs
                                    ];
                            }), mapM(f, ys));
              }));
}

var Monad = {
  pure: pure,
  $great$great$eq: $great$great$eq,
  $eq$less$less: $eq$less$less,
  mapM: mapM
};

function readFile(path) {
  return Fs.promises.readFile(path, "utf-8");
}

function writeFile(path, data) {
  return Fs.promises.writeFile(path, data, "utf-8");
}

function deleteFile(path) {
  return Fs.promises.unlink(path);
}

function existsFile(path) {
  return Fs.promises.access(path).then((function (param) {
                  return Promise.resolve(true);
                })).catch((function (param) {
                return Promise.resolve(false);
              }));
}

function copyFile(origin, dest) {
  return Fs.promises.copyFile(origin, dest);
}

var Functor = {
  $less$$great: $less$$great,
  $less$amp$great: $less$amp$great
};

export {
  Functor ,
  Monad ,
  readFile ,
  writeFile ,
  deleteFile ,
  existsFile ,
  copyFile ,
  
}
/* fs Not a pure module */
