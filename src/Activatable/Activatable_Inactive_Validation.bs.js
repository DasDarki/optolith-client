// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as EntryGroups$OptolithClient from "../Misc/EntryGroups.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Prerequisites$OptolithClient from "../Prerequisites/Prerequisites.bs.js";
import * as Activatable_Accessors$OptolithClient from "./Activatable_Accessors.bs.js";

function getActivePactGiftsCount(specialAbilityPairs) {
  return Curry._3(Ley_IntMap$OptolithClient.IntMap.Foldable.foldr, (function (param) {
                var heroEntry = param[1];
                var match = param[0];
                var apValue = match.apValue;
                if (heroEntry === undefined) {
                  return Ley_Function$OptolithClient.id;
                }
                var active = heroEntry.active;
                if (!Activatable_Accessors$OptolithClient.isActive(heroEntry)) {
                  return Ley_Function$OptolithClient.id;
                }
                var match$1 = Curry._1(Ley_IntMap$OptolithClient.IntMap.Foldable.$$null, match.prerequisites.levels);
                if (!match$1 && apValue !== undefined && apValue.TAG && match.levels !== undefined && active) {
                  var level = active.hd.level;
                  if (level !== undefined) {
                    return function (param) {
                      return level + param | 0;
                    };
                  }
                  
                }
                return function (param) {
                  return 1 + param | 0;
                };
              }), 0, EntryGroups$OptolithClient.SpecialAbility.getFromGroup(/* Paktgeschenke */29, specialAbilityPairs));
}

function isSpecialAbilitySpecificAdditionEnabled(rules, maybePact, param, specialAbility) {
  var matchingLanguagesScripts = param.matchingLanguagesScripts;
  var activePactGiftsCount = param.activePactGiftsCount;
  var specialAbilityPairs = param.specialAbilityPairs;
  var match = Id$OptolithClient.SpecialAbility.fromInt(specialAbility.id);
  var match$1 = Curry._1(Id$OptolithClient.SpecialAbility.Group.fromInt, specialAbility.gr);
  var exit = 0;
  var exit$1 = 0;
  var exit$2 = 0;
  if (typeof match$1 === "number") {
    if (match$1 >= 13) {
      if (match$1 === 24) {
        return !EntryGroups$OptolithClient.SpecialAbility.hasActiveFromGroup(match$1, specialAbilityPairs);
      }
      if (match$1 === 32) {
        return !EntryGroups$OptolithClient.SpecialAbility.hasActiveFromGroup(match$1, specialAbilityPairs);
      }
      exit$2 = 4;
    } else if (match$1 >= 10) {
      if (match$1 >= 12) {
        var totalActive = EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroup(/* MagicalStyles */12, specialAbilityPairs);
        return totalActive < (
                Activatable_Accessors$OptolithClient.isActiveM(param.magicalStyleCombination) ? 2 : 1
              );
      }
      exit$2 = 4;
    } else {
      if (match$1 >= 8) {
        if (!Activatable_Accessors$OptolithClient.isActiveM(param.combatStyleCombination)) {
          return !EntryGroups$OptolithClient.SpecialAbility.hasActiveFromGroup(Curry._1(Id$OptolithClient.SpecialAbility.Group.fromInt, specialAbility.gr), specialAbilityPairs);
        }
        var totalActive$1 = EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroups({
              hd: /* CombatStylesArmed */8,
              tl: {
                hd: /* CombatStylesUnarmed */9,
                tl: /* [] */0
              }
            }, specialAbilityPairs);
        var equalTypeStylesActive = EntryGroups$OptolithClient.SpecialAbility.countActiveFromGroup(Curry._1(Id$OptolithClient.SpecialAbility.Group.fromInt, specialAbility.gr), specialAbilityPairs);
        if (totalActive$1 < 3) {
          return true;
        } else {
          return equalTypeStylesActive < 2;
        }
      }
      exit$2 = 4;
    }
  } else {
    exit$2 = 4;
  }
  if (exit$2 === 4) {
    if (typeof match === "number") {
      if (match >= 21) {
        if (match === 47) {
          return !EntryGroups$OptolithClient.SpecialAbility.hasActiveFromGroup(/* Paktgeschenke */29, specialAbilityPairs);
        }
        if (match === 84) {
          if (Ley_List$OptolithClient.Foldable.length(matchingLanguagesScripts.languagesWithMatchingScripts) >= 1) {
            return Ley_List$OptolithClient.Foldable.length(matchingLanguagesScripts.scriptsWithMatchingLanguages) >= 1;
          } else {
            return false;
          }
        }
        exit$1 = 3;
      } else {
        if (match === 15) {
          return !EntryGroups$OptolithClient.SpecialAbility.hasActiveFromGroups({
                      hd: /* CombatStylesArmed */8,
                      tl: {
                        hd: /* CombatStylesUnarmed */9,
                        tl: /* [] */0
                      }
                    }, specialAbilityPairs);
        }
        if (match >= 20) {
          return !EntryGroups$OptolithClient.SpecialAbility.hasActiveFromGroup(/* MagicalStyles */12, specialAbilityPairs);
        }
        exit$1 = 3;
      }
    } else {
      exit$1 = 3;
    }
  }
  if (exit$1 === 3) {
    if (typeof match$1 === "number" && match$1 === 29) {
      if (maybePact === undefined) {
        return false;
      }
      var match$2 = Id$OptolithClient.Pact.fromInt(maybePact.category);
      if (typeof match$2 === "number") {
        if (match$2 !== 0) {
          if (maybePact.level <= 0) {
            return activePactGiftsCount < 3;
          } else {
            return (maybePact.level + 7 | 0) > activePactGiftsCount;
          }
        } else if (Activatable_Accessors$OptolithClient.isActiveM(param.dunklesAbbild)) {
          return false;
        } else {
          return maybePact.level > activePactGiftsCount;
        }
      } else {
        return false;
      }
    }
    exit = 2;
  }
  if (exit === 2 && typeof match === "number" && match === 71) {
    return Curry._2(Ley_IntMap$OptolithClient.member, Id$OptolithClient.OptionalRule.toInt(/* LanguageSpecialization */1), rules.activeOptionalRules);
  }
  if (typeof match$1 === "number") {
    return !(match$1 === 31 || match$1 === 30);
  } else {
    return true;
  }
}

function getFlatFirstPrerequisites(staticAdvantage) {
  switch (staticAdvantage.TAG | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return Prerequisites$OptolithClient.Flatten.getFirstDisAdvLevelPrerequisites(staticAdvantage._0.prerequisites);
    case /* SpecialAbility */2 :
        return Prerequisites$OptolithClient.Flatten.getFirstLevelPrerequisites(staticAdvantage._0.prerequisites);
    
  }
}

function isEntrySpecificAdditionEnabled(cache, staticData, hero, staticEntry) {
  var tmp;
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        tmp = true;
        break;
    case /* SpecialAbility */2 :
        tmp = isSpecialAbilitySpecificAdditionEnabled(hero.rules, hero.pact, cache, staticEntry._0);
        break;
    
  }
  if (tmp) {
    return Prerequisites$OptolithClient.Validation.arePrerequisitesMet(staticData, hero, Id$OptolithClient.Activatable.generalize(Activatable_Accessors$OptolithClient.id(staticEntry)), getFlatFirstPrerequisites(staticEntry));
  } else {
    return false;
  }
}

function hasNoGenerallyRestrictingDependency(param) {
  if (param !== undefined) {
    return Ley_List$OptolithClient.Foldable.all((function (param) {
                  if (param.target.TAG || param.active || param.options) {
                    return true;
                  } else {
                    return param.level !== undefined;
                  }
                }), param.dependencies);
  } else {
    return true;
  }
}

function hasNotReachedMaximumEntries(staticEntry, maybeHeroEntry) {
  var match = Activatable_Accessors$OptolithClient.max(staticEntry);
  if (match !== undefined) {
    if (match !== 0) {
      if (maybeHeroEntry !== undefined) {
        return match > Ley_List$OptolithClient.Foldable.length(maybeHeroEntry.active);
      } else {
        return true;
      }
    } else {
      return false;
    }
  } else {
    return true;
  }
}

function isValidExtendedSpecialAbility(param, staticEntry) {
  var validExtendedSpecialAbilities = param.validExtendedSpecialAbilities;
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return true;
    case /* SpecialAbility */2 :
        var staticSpecialAbility = staticEntry._0;
        var match = Curry._1(Id$OptolithClient.SpecialAbility.Group.fromInt, staticSpecialAbility.gr);
        if (typeof match === "number") {
          if (match >= 14) {
            if (match !== 25 && match !== 33) {
              return true;
            } else {
              return Ley_List$OptolithClient.elem(staticSpecialAbility.id, validExtendedSpecialAbilities);
            }
          } else if (match !== 10 && match < 13) {
            return true;
          } else {
            return Ley_List$OptolithClient.elem(staticSpecialAbility.id, validExtendedSpecialAbilities);
          }
        } else {
          return true;
        }
    
  }
}

function isAdditionValid(cache, staticData, hero, staticEntry, maybeHeroEntry) {
  if (isEntrySpecificAdditionEnabled(cache, staticData, hero, staticEntry) && hasNoGenerallyRestrictingDependency(maybeHeroEntry) && hasNotReachedMaximumEntries(staticEntry, maybeHeroEntry) && isValidExtendedSpecialAbility(cache, staticEntry)) {
    switch (staticEntry.TAG | 0) {
      case /* Advantage */0 :
      case /* Disadvantage */1 :
          break;
      case /* SpecialAbility */2 :
          return true;
      
    }
    if (cache.requiredApplyToMagicalActions) {
      return !staticEntry._0.isExclusiveToArcaneSpellworks;
    } else {
      return true;
    }
  } else {
    return false;
  }
}

export {
  getActivePactGiftsCount ,
  isAdditionValid ,
  
}
/* Ley_IntMap-OptolithClient Not a pure module */
