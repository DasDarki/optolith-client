// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_Map$OptolithClient from "../Data/Ley_Map.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Prerequisite$OptolithClient from "../Prerequisites/Prerequisite.bs.js";
import * as PublicationRef$OptolithClient from "../Sources/PublicationRef.bs.js";
import * as TranslationMap$OptolithClient from "../Misc/TranslationMap.bs.js";

function showId(id) {
  switch (id[0]) {
    case /* Generic */0 :
        return "Generic(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Skill */1 :
        return "Skill(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* CombatTechnique */2 :
        return "CombatTechnique(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Spell */3 :
        return "Spell(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Cantrip */4 :
        return "Cantrip(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* LiturgicalChant */5 :
        return "LiturgicalChant(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Blessing */6 :
        return "Blessing(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* SpecialAbility */7 :
        return "SpecialAbility(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    
  }
}

var $$Map = Ley_Map$OptolithClient.Make(Id$OptolithClient.Activatable.SelectOption);

function t(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          description: JsonStrict$OptolithClient.optionalField("description", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.field("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

var Translation = {
  t: t
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translation);

function multilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          apValue: JsonStrict$OptolithClient.optionalField("apValue", JsonStrict$OptolithClient.$$int, json),
          prerequisites: JsonStrict$OptolithClient.field("prerequisites", Prerequisite$OptolithClient.Collection.General.decodeMultilingual, json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.Decode.multilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.Decode.t, json)
        };
}

function multilingualAssoc(json) {
  var x = multilingual(json);
  return [
          [
            /* Generic */0,
            x.id
          ],
          x
        ];
}

function resolveTranslations(langs, x) {
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.Decode.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: [
                          /* Generic */0,
                          x.id
                        ],
                        name: translation.name,
                        apValue: x.apValue,
                        prerequisites: Curry._2(Prerequisite$OptolithClient.Collection.General.resolveTranslations, langs, x.prerequisites),
                        description: translation.description,
                        isSecret: undefined,
                        languages: undefined,
                        continent: undefined,
                        isExtinct: undefined,
                        specializations: undefined,
                        specializationInput: undefined,
                        animalGr: undefined,
                        animalLevel: undefined,
                        enhancementTarget: undefined,
                        enhancementLevel: undefined,
                        staticEntry: undefined,
                        applications: undefined,
                        src: PublicationRef$OptolithClient.Decode.resolveTranslationsList(langs, x.src),
                        errata: translation.errata
                      };
              }));
}

function t$1(json) {
  var str = Json_decode.string(json);
  switch (str) {
    case "BLESSINGS" :
        return /* Blessings */0;
    case "CANTRIPS" :
        return /* Cantrips */1;
    case "COMBAT_TECHNIQUES" :
        return /* CombatTechniques */2;
    case "LITURGICAL_CHANTS" :
        return /* LiturgicalChants */3;
    case "SKILLS" :
        return /* Skills */4;
    case "SPELLS" :
        return /* Spells */5;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown select option category: " + str,
            Error: new Error()
          };
  }
}

function t$2(json) {
  return {
          category: JsonStrict$OptolithClient.field("category", t$1, json),
          groups: JsonStrict$OptolithClient.optionalField("groups", (function (param) {
                  return JsonStrict$OptolithClient.list(JsonStrict$OptolithClient.$$int, param);
                }), json)
        };
}

var WithGroups = {
  t: t$2
};

function entryToSelectOption(id, name, staticEntry, src, errata) {
  return {
          id: id,
          name: name,
          apValue: undefined,
          prerequisites: {
            TAG: /* Plain */0,
            _0: /* [] */0
          },
          description: undefined,
          isSecret: undefined,
          languages: undefined,
          continent: undefined,
          isExtinct: undefined,
          specializations: undefined,
          specializationInput: undefined,
          animalGr: undefined,
          animalLevel: undefined,
          enhancementTarget: undefined,
          enhancementLevel: undefined,
          staticEntry: staticEntry,
          applications: undefined,
          src: src,
          errata: errata
        };
}

function resolveWithoutGroups(f, mp, xs) {
  return Curry._3(Ley_IntMap$OptolithClient.foldr, (function (x) {
                var s = Curry._1(f, x);
                return Curry._2($$Map.insert, s.id, s);
              }), xs, mp);
}

function resolveGroups(f, g, grs, mp, xs) {
  return Curry._3(Ley_IntMap$OptolithClient.foldr, (function (x) {
                if (!Curry._2(Ley_List$OptolithClient.elem, Curry._1(g, x), grs)) {
                  return Ley_Function$OptolithClient.id;
                }
                var s = Curry._1(f, x);
                return Curry._2($$Map.insert, s.id, s);
              }), xs, mp);
}

function blessingToSelectOption(x) {
  return entryToSelectOption([
              /* Blessing */6,
              x.id
            ], x.name, {
              TAG: /* Blessing */0,
              _0: x
            }, x.src, x.errata);
}

function cantripToSelectOption(x) {
  return entryToSelectOption([
              /* Cantrip */4,
              x.id
            ], x.name, {
              TAG: /* Cantrip */1,
              _0: x
            }, x.src, x.errata);
}

function combatTechniqueToSelectOption(x) {
  return entryToSelectOption([
              /* CombatTechnique */2,
              x.id
            ], x.name, {
              TAG: /* CombatTechnique */2,
              _0: x
            }, x.src, x.errata);
}

function resolveCombatTechniques(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(combatTechniqueToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(combatTechniqueToSelectOption, param, param$1);
    };
  }
}

function liturgicalChantToSelectOption(x) {
  return entryToSelectOption([
              /* LiturgicalChant */5,
              x.id
            ], x.name, {
              TAG: /* LiturgicalChant */3,
              _0: x
            }, x.src, x.errata);
}

function resolveLiturgicalChants(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(liturgicalChantToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(liturgicalChantToSelectOption, param, param$1);
    };
  }
}

function skillToSelectOption(x) {
  return entryToSelectOption([
              /* Skill */1,
              x.id
            ], x.name, {
              TAG: /* Skill */4,
              _0: x
            }, x.src, x.errata);
}

function resolveSkills(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(skillToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(skillToSelectOption, param, param$1);
    };
  }
}

function spellToSelectOption(x) {
  return entryToSelectOption([
              /* Spell */3,
              x.id
            ], x.name, {
              TAG: /* Spell */5,
              _0: x
            }, x.src, x.errata);
}

function resolveSpells(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(spellToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(spellToSelectOption, param, param$1);
    };
  }
}

function resolveCategories(blessings, cantrips, combatTechniques, liturgicalChants, skills, spells, categories) {
  return Curry._3(Ley_List$OptolithClient.foldr, (function (cat) {
                var match = cat.category;
                switch (match) {
                  case /* Blessings */0 :
                      return function (param) {
                        return resolveWithoutGroups(blessingToSelectOption, blessings, param);
                      };
                  case /* Cantrips */1 :
                      return function (param) {
                        return resolveWithoutGroups(cantripToSelectOption, cantrips, param);
                      };
                  case /* CombatTechniques */2 :
                      var partial_arg = resolveCombatTechniques(cat.groups);
                      return function (param) {
                        return partial_arg(combatTechniques, param);
                      };
                  case /* LiturgicalChants */3 :
                      var partial_arg$1 = resolveLiturgicalChants(cat.groups);
                      return function (param) {
                        return partial_arg$1(liturgicalChants, param);
                      };
                  case /* Skills */4 :
                      var partial_arg$2 = resolveSkills(cat.groups);
                      return function (param) {
                        return partial_arg$2(skills, param);
                      };
                  case /* Spells */5 :
                      var partial_arg$3 = resolveSpells(cat.groups);
                      return function (param) {
                        return partial_arg$3(spells, param);
                      };
                  
                }
              }), $$Map.empty, Ley_Option$OptolithClient.fromOption(/* [] */0, categories));
}

function mergeSelectOptions(explicits, fromCategories) {
  return Curry._3($$Map.foldl, (function (mp, x) {
                return Curry._3($$Map.insert, x.id, x, mp);
              }), fromCategories, explicits);
}

var Decode_Category = {
  WithGroups: WithGroups
};

var Decode_ResolveCategories = {
  resolveCategories: resolveCategories,
  mergeSelectOptions: mergeSelectOptions
};

var Decode = {
  multilingualAssoc: multilingualAssoc,
  resolveTranslations: resolveTranslations,
  Category: Decode_Category,
  ResolveCategories: Decode_ResolveCategories
};

export {
  showId ,
  $$Map ,
  Decode ,
  
}
/* Map Not a pure module */
