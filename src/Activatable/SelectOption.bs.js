// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_Map$OptolithClient from "../Data/Ley_Map.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as SourceRef$OptolithClient from "../Sources/SourceRef.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Prerequisite$OptolithClient from "../Prerequisites/Prerequisite.bs.js";

function showId(id) {
  switch (id[0]) {
    case /* Generic */0 :
        return "Generic(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Skill */1 :
        return "Skill(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* CombatTechnique */2 :
        return "CombatTechnique(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Spell */3 :
        return "Spell(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Cantrip */4 :
        return "Cantrip(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* LiturgicalChant */5 :
        return "LiturgicalChant(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* Blessing */6 :
        return "Blessing(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    case /* SpecialAbility */7 :
        return "SpecialAbility(" + (Ley_Int$OptolithClient.show(id[1]) + ")");
    
  }
}

var SelectOptionMap = Ley_Map$OptolithClient.Make(Id$OptolithClient.Activatable.SelectOption);

function tL10n(json) {
  return {
          id: Json_decode.field("id", Id$OptolithClient.Activatable.SelectOption.Decode.t, json),
          name: Json_decode.field("name", Json_decode.string, json),
          description: JsonStrict$OptolithClient.optionalField("description", Json_decode.string, json),
          specializations: JsonStrict$OptolithClient.optionalField("specializations", (function (param) {
                  return Json_decode.list(Json_decode.string, param);
                }), json),
          specializationInput: JsonStrict$OptolithClient.optionalField("specializationInput", Json_decode.string, json),
          src: Json_decode.field("src", SourceRef$OptolithClient.Decode.list, json),
          errata: Json_decode.field("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

function tUniv(json) {
  return {
          id: Json_decode.field("id", Id$OptolithClient.Activatable.SelectOption.Decode.t, json),
          cost: JsonStrict$OptolithClient.optionalField("cost", Json_decode.$$int, json),
          prerequisites: Prerequisite$OptolithClient.Decode.t(json),
          isSecret: JsonStrict$OptolithClient.optionalField("isSecret", Json_decode.bool, json),
          languages: JsonStrict$OptolithClient.optionalField("languages", (function (param) {
                  return Json_decode.list(Json_decode.$$int, param);
                }), json),
          continent: JsonStrict$OptolithClient.optionalField("continent", Json_decode.$$int, json),
          isExtinct: JsonStrict$OptolithClient.optionalField("isExtinct", Json_decode.bool, json),
          animalGr: JsonStrict$OptolithClient.optionalField("animalGr", Json_decode.$$int, json),
          animalLevel: JsonStrict$OptolithClient.optionalField("animalLevel", Json_decode.$$int, json)
        };
}

function t(univ, l10n) {
  return {
          id: univ.id,
          name: l10n.name,
          cost: univ.cost,
          prerequisites: univ.prerequisites,
          description: l10n.description,
          isSecret: univ.isSecret,
          languages: univ.languages,
          continent: univ.continent,
          isExtinct: univ.isExtinct,
          specializations: l10n.specializations,
          specializationInput: l10n.specializationInput,
          animalGr: univ.animalGr,
          animalLevel: univ.animalLevel,
          enhancementTarget: undefined,
          enhancementLevel: undefined,
          wikiEntry: undefined,
          applications: undefined,
          src: l10n.src,
          errata: l10n.errata
        };
}

function category(json) {
  var str = Json_decode.string(json);
  switch (str) {
    case "BLESSINGS" :
        return /* Blessings */0;
    case "CANTRIPS" :
        return /* Cantrips */1;
    case "COMBAT_TECHNIQUES" :
        return /* CombatTechniques */2;
    case "LITURGICAL_CHANTS" :
        return /* LiturgicalChants */3;
    case "SKILLS" :
        return /* Skills */4;
    case "SPELLS" :
        return /* Spells */5;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown select option category: " + str,
            Error: new Error()
          };
  }
}

function categoryWithGroups(json) {
  return {
          category: Json_decode.field("category", category, json),
          groups: JsonStrict$OptolithClient.optionalField("groups", (function (param) {
                  return Json_decode.list(Json_decode.$$int, param);
                }), json)
        };
}

function entryToSelectOption(id, name, wikiEntry, src, errata) {
  return {
          id: id,
          name: name,
          cost: undefined,
          prerequisites: Prerequisite$OptolithClient.empty,
          description: undefined,
          isSecret: undefined,
          languages: undefined,
          continent: undefined,
          isExtinct: undefined,
          specializations: undefined,
          specializationInput: undefined,
          animalGr: undefined,
          animalLevel: undefined,
          enhancementTarget: undefined,
          enhancementLevel: undefined,
          wikiEntry: wikiEntry,
          applications: undefined,
          src: src,
          errata: errata
        };
}

function insertEntry(s) {
  return Curry._2(SelectOptionMap.insert, s.id, s);
}

function resolveWithoutGroups(f, mp, xs) {
  return Curry._3(Ley_IntMap$OptolithClient.IntMap.Foldable.foldr, (function (x) {
                var s = Curry._1(f, x);
                return Curry._2(SelectOptionMap.insert, s.id, s);
              }), xs, mp);
}

function resolveGroups(f, g, grs, mp, xs) {
  return Curry._3(Ley_IntMap$OptolithClient.IntMap.Foldable.foldr, (function (x) {
                if (!Ley_List$OptolithClient.Foldable.elem(Curry._1(g, x), grs)) {
                  return Ley_Function$OptolithClient.id;
                }
                var s = Curry._1(f, x);
                return Curry._2(SelectOptionMap.insert, s.id, s);
              }), xs, mp);
}

function blessingToSelectOption(x) {
  return entryToSelectOption([
              /* Blessing */6,
              x.id
            ], x.name, {
              TAG: /* Blessing */0,
              _0: x
            }, x.src, x.errata);
}

function resolveBlessings(param, param$1) {
  return resolveWithoutGroups(blessingToSelectOption, param, param$1);
}

function cantripToSelectOption(x) {
  return entryToSelectOption([
              /* Cantrip */4,
              x.id
            ], x.name, {
              TAG: /* Cantrip */1,
              _0: x
            }, x.src, x.errata);
}

function resolveCantrips(param, param$1) {
  return resolveWithoutGroups(cantripToSelectOption, param, param$1);
}

function combatTechniqueToSelectOption(x) {
  return entryToSelectOption([
              /* CombatTechnique */2,
              x.id
            ], x.name, {
              TAG: /* CombatTechnique */2,
              _0: x
            }, x.src, x.errata);
}

function resolveCombatTechniques(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(combatTechniqueToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(combatTechniqueToSelectOption, param, param$1);
    };
  }
}

function liturgicalChantToSelectOption(x) {
  return entryToSelectOption([
              /* LiturgicalChant */5,
              x.id
            ], x.name, {
              TAG: /* LiturgicalChant */3,
              _0: x
            }, x.src, x.errata);
}

function resolveLiturgicalChants(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(liturgicalChantToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(liturgicalChantToSelectOption, param, param$1);
    };
  }
}

function skillToSelectOption(x) {
  return entryToSelectOption([
              /* Skill */1,
              x.id
            ], x.name, {
              TAG: /* Skill */4,
              _0: x
            }, x.src, x.errata);
}

function resolveSkills(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(skillToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(skillToSelectOption, param, param$1);
    };
  }
}

function spellToSelectOption(x) {
  return entryToSelectOption([
              /* Spell */3,
              x.id
            ], x.name, {
              TAG: /* Spell */5,
              _0: x
            }, x.src, x.errata);
}

function resolveSpells(mgrs) {
  if (mgrs !== undefined) {
    return function (param, param$1) {
      return resolveGroups(spellToSelectOption, (function (x) {
                    return x.gr;
                  }), mgrs, param, param$1);
    };
  } else {
    return function (param, param$1) {
      return resolveWithoutGroups(spellToSelectOption, param, param$1);
    };
  }
}

function resolveCategories(blessings, cantrips, combatTechniques, liturgicalChants, skills, spells, categories) {
  return Ley_List$OptolithClient.Foldable.foldr((function (cat) {
                var match = cat.category;
                switch (match) {
                  case /* Blessings */0 :
                      return function (param) {
                        return resolveBlessings(blessings, param);
                      };
                  case /* Cantrips */1 :
                      return function (param) {
                        return resolveCantrips(cantrips, param);
                      };
                  case /* CombatTechniques */2 :
                      var partial_arg = resolveCombatTechniques(cat.groups);
                      return function (param) {
                        return partial_arg(combatTechniques, param);
                      };
                  case /* LiturgicalChants */3 :
                      var partial_arg$1 = resolveLiturgicalChants(cat.groups);
                      return function (param) {
                        return partial_arg$1(liturgicalChants, param);
                      };
                  case /* Skills */4 :
                      var partial_arg$2 = resolveSkills(cat.groups);
                      return function (param) {
                        return partial_arg$2(skills, param);
                      };
                  case /* Spells */5 :
                      var partial_arg$3 = resolveSpells(cat.groups);
                      return function (param) {
                        return partial_arg$3(spells, param);
                      };
                  
                }
              }), SelectOptionMap.empty, Ley_Option$OptolithClient.fromOption(/* [] */0, categories));
}

function l10nToSelectOption(l10n) {
  return {
          id: l10n.id,
          name: l10n.name,
          cost: undefined,
          prerequisites: Prerequisite$OptolithClient.empty,
          description: l10n.description,
          isSecret: undefined,
          languages: undefined,
          continent: undefined,
          isExtinct: undefined,
          specializations: l10n.specializations,
          specializationInput: l10n.specializationInput,
          animalGr: undefined,
          animalLevel: undefined,
          enhancementTarget: undefined,
          enhancementLevel: undefined,
          wikiEntry: undefined,
          applications: undefined,
          src: l10n.src,
          errata: l10n.errata
        };
}

function mergeUnivIntoSelectOption(univ, x) {
  return {
          id: x.id,
          name: x.name,
          cost: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.cost, x.cost),
          prerequisites: univ.prerequisites,
          description: x.description,
          isSecret: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.isSecret, x.isSecret),
          languages: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.languages, x.languages),
          continent: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.continent, x.continent),
          isExtinct: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.isExtinct, x.isExtinct),
          specializations: x.specializations,
          specializationInput: x.specializationInput,
          animalGr: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.animalGr, x.animalGr),
          animalLevel: Ley_Option$OptolithClient.Alternative.$less$pipe$great(univ.animalLevel, x.animalLevel),
          enhancementTarget: x.enhancementTarget,
          enhancementLevel: x.enhancementLevel,
          wikiEntry: x.wikiEntry,
          applications: undefined,
          src: x.src,
          errata: x.errata
        };
}

function mergeSelectOptions(ml10ns, munivs, fromCategories) {
  return Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (univs, mp) {
                    return Ley_List$OptolithClient.Foldable.foldr((function (univ, mp$prime) {
                                  return Curry._3(SelectOptionMap.adjust, (function (param) {
                                                return mergeUnivIntoSelectOption(univ, param);
                                              }), univ.id, mp$prime);
                                }), mp, univs);
                  }), munivs), Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (l10ns, mp) {
                        return Ley_List$OptolithClient.Foldable.foldr((function (l10n, mp$prime) {
                                      if (Curry._2(SelectOptionMap.member, l10n.id, mp$prime)) {
                                        throw {
                                              RE_EXN_ID: Json_decode.DecodeError,
                                              _1: "mergeSelectOptions: Key " + (showId(l10n.id) + "already in use"),
                                              Error: new Error()
                                            };
                                      }
                                      return Curry._3(SelectOptionMap.insert, l10n.id, l10nToSelectOption(l10n), mp$prime);
                                    }), mp, l10ns);
                      }), ml10ns), fromCategories));
}

var Decode = {
  tL10n: tL10n,
  tUniv: tUniv,
  t: t,
  category: category,
  categoryWithGroups: categoryWithGroups,
  entryToSelectOption: entryToSelectOption,
  insertEntry: insertEntry,
  resolveWithoutGroups: resolveWithoutGroups,
  resolveGroups: resolveGroups,
  blessingToSelectOption: blessingToSelectOption,
  resolveBlessings: resolveBlessings,
  cantripToSelectOption: cantripToSelectOption,
  resolveCantrips: resolveCantrips,
  combatTechniqueToSelectOption: combatTechniqueToSelectOption,
  resolveCombatTechniques: resolveCombatTechniques,
  liturgicalChantToSelectOption: liturgicalChantToSelectOption,
  resolveLiturgicalChants: resolveLiturgicalChants,
  skillToSelectOption: skillToSelectOption,
  resolveSkills: resolveSkills,
  spellToSelectOption: spellToSelectOption,
  resolveSpells: resolveSpells,
  resolveCategories: resolveCategories,
  l10nToSelectOption: l10nToSelectOption,
  mergeUnivIntoSelectOption: mergeUnivIntoSelectOption,
  mergeSelectOptions: mergeSelectOptions
};

export {
  showId ,
  SelectOptionMap ,
  Decode ,
  
}
/* SelectOptionMap Not a pure module */
