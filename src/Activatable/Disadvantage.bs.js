// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as Advantage$OptolithClient from "./Advantage.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Prerequisite$OptolithClient from "../Prerequisites/Prerequisite.bs.js";
import * as SelectOption$OptolithClient from "./SelectOption.bs.js";
import * as PublicationRef$OptolithClient from "../Sources/PublicationRef.bs.js";
import * as TranslationMap$OptolithClient from "../Misc/TranslationMap.bs.js";

function decode(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          nameInWiki: JsonStrict$OptolithClient.optionalField("nameInWiki", JsonStrict$OptolithClient.string, json),
          rules: JsonStrict$OptolithClient.field("rules", JsonStrict$OptolithClient.string, json),
          input: JsonStrict$OptolithClient.optionalField("input", JsonStrict$OptolithClient.string, json),
          range: JsonStrict$OptolithClient.optionalField("range", JsonStrict$OptolithClient.string, json),
          actions: JsonStrict$OptolithClient.optionalField("actions", JsonStrict$OptolithClient.string, json),
          prerequisites: JsonStrict$OptolithClient.optionalField("prerequisites", JsonStrict$OptolithClient.string, json),
          prerequisitesStart: JsonStrict$OptolithClient.optionalField("prerequisitesStart", JsonStrict$OptolithClient.string, json),
          prerequisitesEnd: JsonStrict$OptolithClient.optionalField("prerequisitesEnd", JsonStrict$OptolithClient.string, json),
          apValue: JsonStrict$OptolithClient.optionalField("apValue", JsonStrict$OptolithClient.string, json),
          apValueAppend: JsonStrict$OptolithClient.optionalField("apValueAppend", JsonStrict$OptolithClient.string, json),
          errata: JsonStrict$OptolithClient.field("errata", Erratum$OptolithClient.decodeList, json)
        };
}

var Translations = {
  decode: decode
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translations);

function decodeMultilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          noMaxAPInfluence: JsonStrict$OptolithClient.optionalField("noMaxAPInfluence", JsonStrict$OptolithClient.bool, json),
          isExclusiveToArcaneSpellworks: JsonStrict$OptolithClient.optionalField("isExclusiveToArcaneSpellworks", JsonStrict$OptolithClient.bool, json),
          levels: JsonStrict$OptolithClient.optionalField("levels", JsonStrict$OptolithClient.$$int, json),
          max: JsonStrict$OptolithClient.optionalField("max", JsonStrict$OptolithClient.$$int, json),
          selectOptionCategories: JsonStrict$OptolithClient.optionalField("selectOptionCategories", (function (param) {
                  return JsonStrict$OptolithClient.list(SelectOption$OptolithClient.Category.WithGroups.decode, param);
                }), json),
          selectOptions: Ley_Option$OptolithClient.option(SelectOption$OptolithClient.$$Map.empty, SelectOption$OptolithClient.$$Map.fromList, JsonStrict$OptolithClient.optionalField("selectOptions", (function (param) {
                      return JsonStrict$OptolithClient.list(SelectOption$OptolithClient.decodeMultilingualPair, param);
                    }), json)),
          prerequisites: JsonStrict$OptolithClient.field("prerequisites", Prerequisite$OptolithClient.Collection.AdvantageDisadvantage.decodeMultilingual, json),
          apValue: JsonStrict$OptolithClient.optionalField("apValue", Advantage$OptolithClient.Static.decodeApValue, json),
          gr: JsonStrict$OptolithClient.field("gr", JsonStrict$OptolithClient.$$int, json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.decodeMultilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.decode, json)
        };
}

function decode$1(langs, blessings, cantrips, combatTechniques, liturgicalChants, skills, spells, json) {
  var x = decodeMultilingual(json);
  return Curry._2(Ley_Option$OptolithClient.Infix.$less$amp$great, Curry._2(TranslationMap.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return [
                        x.id,
                        {
                          id: x.id,
                          name: translation.name,
                          nameInWiki: translation.nameInWiki,
                          noMaxAPInfluence: Ley_Option$OptolithClient.fromOption(false, x.noMaxAPInfluence),
                          isExclusiveToArcaneSpellworks: Ley_Option$OptolithClient.fromOption(false, x.isExclusiveToArcaneSpellworks),
                          levels: x.levels,
                          max: x.max,
                          rules: translation.rules,
                          selectOptions: SelectOption$OptolithClient.ResolveCategories.mergeSelectOptions(Curry._2(SelectOption$OptolithClient.$$Map.mapMaybe, (function (param) {
                                      return SelectOption$OptolithClient.resolveTranslations(langs, param);
                                    }), x.selectOptions), SelectOption$OptolithClient.ResolveCategories.resolveCategories(blessings, cantrips, combatTechniques, liturgicalChants, skills, spells, x.selectOptionCategories)),
                          input: translation.input,
                          range: translation.range,
                          actions: translation.actions,
                          prerequisites: Curry._2(Prerequisite$OptolithClient.Collection.AdvantageDisadvantage.resolveTranslations, langs, x.prerequisites),
                          prerequisitesText: translation.prerequisites,
                          prerequisitesTextStart: translation.prerequisitesStart,
                          prerequisitesTextEnd: translation.prerequisitesEnd,
                          apValue: x.apValue,
                          apValueText: translation.apValue,
                          apValueTextAppend: translation.apValueAppend,
                          gr: x.gr,
                          src: PublicationRef$OptolithClient.resolveTranslationsList(langs, x.src),
                          errata: translation.errata
                        }
                      ];
              }));
}

var Static = {
  decode: decode$1
};

export {
  Static ,
  
}
/* TranslationMap Not a pure module */
