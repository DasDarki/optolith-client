// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Path from "path";
import * as Yaml from "yaml";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as IO$OptolithClient from "../Data/IO.bs.js";
import * as Directory$OptolithClient from "../Data/Directory.bs.js";

var Parser = {};

function parseFilesOfEntryType(dir) {
  return IO$OptolithClient.mapM((function (x) {
                return Curry._2(IO$OptolithClient.Infix.$less$amp$great, IO$OptolithClient.readFile(x), (function (prim) {
                              return Yaml.parse(prim);
                            }));
              }), Directory$OptolithClient.getDirectoryContents(Path.join(".", "src", "Database", dir)));
}

function parseFiles1(onProgress, progressStartNum, dir) {
  return Curry._2(IO$OptolithClient.Infix.$less$amp$great, parseFilesOfEntryType(dir), (function (x) {
                Curry._1(onProgress, progressStartNum + 1 | 0);
                return x;
              }));
}

function parseFiles2(onProgress, progressStartNum, param) {
  var dir2 = param[1];
  return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles1(onProgress, progressStartNum, param[0]), (function (res1) {
                return Curry._2(IO$OptolithClient.Infix.$less$amp$great, parseFiles1(onProgress, progressStartNum + 1 | 0, dir2), (function (res2) {
                              return [
                                      res1,
                                      res2
                                    ];
                            }));
              }));
}

function parseFiles4(onProgress, progressStartNum, param) {
  var dir4 = param[3];
  var dir3 = param[2];
  return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles2(onProgress, progressStartNum, [
                  param[0],
                  param[1]
                ]), (function (param) {
                var res2 = param[1];
                var res1 = param[0];
                return Curry._2(IO$OptolithClient.Infix.$less$amp$great, parseFiles2(onProgress, progressStartNum + 2 | 0, [
                                dir3,
                                dir4
                              ]), (function (param) {
                              return [
                                      res1,
                                      res2,
                                      param[0],
                                      param[1]
                                    ];
                            }));
              }));
}

function parseFiles8(onProgress, progressStartNum, param) {
  var dir8 = param[7];
  var dir7 = param[6];
  var dir6 = param[5];
  var dir5 = param[4];
  return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles4(onProgress, progressStartNum, [
                  param[0],
                  param[1],
                  param[2],
                  param[3]
                ]), (function (param) {
                var res4 = param[3];
                var res3 = param[2];
                var res2 = param[1];
                var res1 = param[0];
                return Curry._2(IO$OptolithClient.Infix.$less$amp$great, parseFiles4(onProgress, progressStartNum + 4 | 0, [
                                dir5,
                                dir6,
                                dir7,
                                dir8
                              ]), (function (param) {
                              return [
                                      res1,
                                      res2,
                                      res3,
                                      res4,
                                      param[0],
                                      param[1],
                                      param[2],
                                      param[3]
                                    ];
                            }));
              }));
}

function parseFiles16(onProgress, progressStartNum, param) {
  var dir16 = param[15];
  var dir15 = param[14];
  var dir14 = param[13];
  var dir13 = param[12];
  var dir12 = param[11];
  var dir11 = param[10];
  var dir10 = param[9];
  var dir9 = param[8];
  return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles8(onProgress, progressStartNum, [
                  param[0],
                  param[1],
                  param[2],
                  param[3],
                  param[4],
                  param[5],
                  param[6],
                  param[7]
                ]), (function (param) {
                var res8 = param[7];
                var res7 = param[6];
                var res6 = param[5];
                var res5 = param[4];
                var res4 = param[3];
                var res3 = param[2];
                var res2 = param[1];
                var res1 = param[0];
                return Curry._2(IO$OptolithClient.Infix.$less$amp$great, parseFiles8(onProgress, progressStartNum + 8 | 0, [
                                dir9,
                                dir10,
                                dir11,
                                dir12,
                                dir13,
                                dir14,
                                dir15,
                                dir16
                              ]), (function (param) {
                              return [
                                      res1,
                                      res2,
                                      res3,
                                      res4,
                                      res5,
                                      res6,
                                      res7,
                                      res8,
                                      param[0],
                                      param[1],
                                      param[2],
                                      param[3],
                                      param[4],
                                      param[5],
                                      param[6],
                                      param[7]
                                    ];
                            }));
              }));
}

function parseFiles(onProgress) {
  return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles16(onProgress, 0, [
                  "Advantages",
                  "AnimistForces",
                  "ArcaneBardTraditions",
                  "ArcaneDancerTraditions",
                  "ArmorTypes",
                  "Aspects",
                  "Attributes",
                  "BlessedTraditions",
                  "Blessings",
                  "Brews",
                  "Cantrips",
                  "CombatSpecialAbilityGroups",
                  "CombatTechniqueGroups",
                  "CombatTechniques",
                  "Conditions",
                  "Cultures"
                ]), (function (param) {
                var cultures = param[15];
                var conditions = param[14];
                var combatTechniques = param[13];
                var combatTechniqueGroups = param[12];
                var combatSpecialAbilityGroups = param[11];
                var cantrips = param[10];
                var brews = param[9];
                var blessings = param[8];
                var blessedTraditions = param[7];
                var attributes = param[6];
                var aspects = param[5];
                var armorTypes = param[4];
                var arcaneDancerTraditions = param[3];
                var arcaneBardTraditions = param[2];
                var animistForces = param[1];
                var advantages = param[0];
                return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles16(onProgress, 16, [
                                "Curses",
                                "DerivedCharacteristics",
                                "Disadvantages",
                                "DominationRituals",
                                "ElvenMagicalSongs",
                                "Items",
                                "EquipmentGroups",
                                "EquipmentPackages",
                                "ExperienceLevels",
                                "EyeColors",
                                "FocusRules",
                                "GeodeRituals",
                                "HairColors",
                                "LiturgicalChantGroups",
                                "LiturgicalChants",
                                "MagicalDances"
                              ]), (function (param) {
                              var magicalDances = param[15];
                              var liturgicalChants = param[14];
                              var liturgicalChantGroups = param[13];
                              var hairColors = param[12];
                              var geodeRituals = param[11];
                              var focusRules = param[10];
                              var eyeColors = param[9];
                              var experienceLevels = param[8];
                              var equipmentPackages = param[7];
                              var equipmentGroups = param[6];
                              var items = param[5];
                              var elvenMagicalSongs = param[4];
                              var dominationRituals = param[3];
                              var disadvantages = param[2];
                              var derivedCharacteristics = param[1];
                              var curses = param[0];
                              return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles16(onProgress, 32, [
                                              "MagicalMelodies",
                                              "MagicalTraditions",
                                              "OptionalRules",
                                              "Pacts",
                                              "Professions",
                                              "Properties",
                                              "Publications",
                                              "Races",
                                              "Reaches",
                                              "RogueSpells",
                                              "SkillGroups",
                                              "Skills",
                                              "SocialStatuses",
                                              "SpecialAbilities",
                                              "SpecialAbilityGroups",
                                              "SpellGroups"
                                            ]), (function (param) {
                                            var spellGroups = param[15];
                                            var specialAbilityGroups = param[14];
                                            var specialAbilities = param[13];
                                            var socialStatuses = param[12];
                                            var skills = param[11];
                                            var skillGroups = param[10];
                                            var rogueSpells = param[9];
                                            var reaches = param[8];
                                            var races = param[7];
                                            var publications = param[6];
                                            var properties = param[5];
                                            var professions = param[4];
                                            var pacts = param[3];
                                            var optionalRules = param[2];
                                            var magicalTraditions = param[1];
                                            var magicalMelodies = param[0];
                                            return Curry._2(IO$OptolithClient.Infix.$great$great$eq, parseFiles4(onProgress, 48, [
                                                            "Spells",
                                                            "States",
                                                            "Subjects",
                                                            "Tribes"
                                                          ]), (function (param) {
                                                          var tribes = param[3];
                                                          var subjects = param[2];
                                                          var states = param[1];
                                                          var spells = param[0];
                                                          return Curry._2(IO$OptolithClient.Infix.$less$amp$great, parseFiles1(onProgress, 52, "ZibiljaRituals"), (function (zibiljaRituals) {
                                                                        return {
                                                                                advantages: advantages,
                                                                                animistForces: animistForces,
                                                                                arcaneBardTraditions: arcaneBardTraditions,
                                                                                arcaneDancerTraditions: arcaneDancerTraditions,
                                                                                armorTypes: armorTypes,
                                                                                aspects: aspects,
                                                                                attributes: attributes,
                                                                                blessedTraditions: blessedTraditions,
                                                                                blessings: blessings,
                                                                                brews: brews,
                                                                                cantrips: cantrips,
                                                                                combatSpecialAbilityGroups: combatSpecialAbilityGroups,
                                                                                combatTechniqueGroups: combatTechniqueGroups,
                                                                                combatTechniques: combatTechniques,
                                                                                conditions: conditions,
                                                                                cultures: cultures,
                                                                                curses: curses,
                                                                                derivedCharacteristics: derivedCharacteristics,
                                                                                disadvantages: disadvantages,
                                                                                dominationRituals: dominationRituals,
                                                                                elvenMagicalSongs: elvenMagicalSongs,
                                                                                items: items,
                                                                                equipmentGroups: equipmentGroups,
                                                                                equipmentPackages: equipmentPackages,
                                                                                experienceLevels: experienceLevels,
                                                                                eyeColors: eyeColors,
                                                                                focusRules: focusRules,
                                                                                geodeRituals: geodeRituals,
                                                                                hairColors: hairColors,
                                                                                liturgicalChantGroups: liturgicalChantGroups,
                                                                                liturgicalChants: liturgicalChants,
                                                                                magicalDances: magicalDances,
                                                                                magicalMelodies: magicalMelodies,
                                                                                magicalTraditions: magicalTraditions,
                                                                                optionalRules: optionalRules,
                                                                                pacts: pacts,
                                                                                professions: professions,
                                                                                properties: properties,
                                                                                publications: publications,
                                                                                races: races,
                                                                                reaches: reaches,
                                                                                rogueSpells: rogueSpells,
                                                                                skillGroups: skillGroups,
                                                                                skills: skills,
                                                                                socialStatuses: socialStatuses,
                                                                                specialAbilities: specialAbilities,
                                                                                specialAbilityGroups: specialAbilityGroups,
                                                                                spellGroups: spellGroups,
                                                                                spells: spells,
                                                                                states: states,
                                                                                subjects: subjects,
                                                                                tribes: tribes,
                                                                                zibiljaRituals: zibiljaRituals
                                                                              };
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function parseUI(locale) {
  return Curry._2(IO$OptolithClient.Infix.$less$amp$great, IO$OptolithClient.readFile(Path.join(".", "src", "Database", "UI", locale + ".yml")), (function (prim) {
                return Yaml.parse(prim);
              }));
}

var parsedEntryTypesTotal = 53;

export {
  Parser ,
  parseFilesOfEntryType ,
  parseFiles1 ,
  parseFiles2 ,
  parseFiles4 ,
  parseFiles8 ,
  parseFiles16 ,
  parsedEntryTypesTotal ,
  parseFiles ,
  parseUI ,
  
}
/* path Not a pure module */
