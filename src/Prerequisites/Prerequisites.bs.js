// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Pacts$OptolithClient from "../Misc/Pacts.bs.js";
import * as Ley_Ix$OptolithClient from "../Data/Ley_Ix.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Tradition$OptolithClient from "../Misc/Tradition.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as SelectOption$OptolithClient from "../Misc/SelectOption.bs.js";
import * as Activatable_Convert$OptolithClient from "../Activatable/Activatable_Convert.bs.js";
import * as Activatable_SelectOptions$OptolithClient from "../Activatable/Activatable_SelectOptions.bs.js";

function applicablePred(oldLevel, newLevel) {
  var level;
  if (oldLevel !== undefined) {
    if (newLevel !== undefined) {
      var match = Ley_Int$OptolithClient.minmax(oldLevel, newLevel);
      var partial_arg_0 = match[0] + 1 | 0;
      var partial_arg_1 = match[1];
      var partial_arg = [
        partial_arg_0,
        partial_arg_1
      ];
      return function (param) {
        return Ley_Ix$OptolithClient.inRange(partial_arg, param);
      };
    }
    level = oldLevel;
  } else {
    if (newLevel === undefined) {
      return function (param) {
        return Ley_Function$OptolithClient.$$const(true, param);
      };
    }
    level = newLevel;
  }
  return function (param) {
    return level >= param;
  };
}

function filterApplicableLevels(oldLevel, newLevel, mp) {
  var pred = applicablePred(oldLevel, newLevel);
  return Curry._2(Ley_IntMap$OptolithClient.filterWithKey, (function (k, param) {
                return Curry._1(pred, k);
              }), mp);
}

function flattenPrerequisites(p, xs) {
  var xs$1 = Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (x) {
              var partial_arg = {
                TAG: /* PrimaryAttribute */5,
                _0: x
              };
              return function (param) {
                return Ley_List$OptolithClient.cons(partial_arg, param);
              };
            }), p.primaryAttribute), Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (x) {
                  var partial_arg = {
                    TAG: /* Pact */3,
                    _0: x
                  };
                  return function (param) {
                    return Ley_List$OptolithClient.cons(partial_arg, param);
                  };
                }), p.pact), Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (x) {
                      var partial_arg = {
                        TAG: /* Culture */2,
                        _0: x
                      };
                      return function (param) {
                        return Ley_List$OptolithClient.cons(partial_arg, param);
                      };
                    }), p.culture), Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (x) {
                          var partial_arg = {
                            TAG: /* Race */1,
                            _0: x
                          };
                          return function (param) {
                            return Ley_List$OptolithClient.cons(partial_arg, param);
                          };
                        }), p.race), Curry._1(Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, (function (x) {
                              var partial_arg = {
                                TAG: /* Sex */0,
                                _0: x
                              };
                              return function (param) {
                                return Ley_List$OptolithClient.cons(partial_arg, param);
                              };
                            }), p.sex), xs)))));
  var xs$2 = Ley_List$OptolithClient.Foldable.foldr((function (x) {
          var partial_arg = {
            TAG: /* Activatable */6,
            _0: x
          };
          return function (param) {
            return Ley_List$OptolithClient.cons(partial_arg, param);
          };
        }), xs$1, p.activatable);
  var xs$3 = Ley_List$OptolithClient.Foldable.foldr((function (x) {
          var partial_arg = {
            TAG: /* ActivatableMultiEntry */7,
            _0: x
          };
          return function (param) {
            return Ley_List$OptolithClient.cons(partial_arg, param);
          };
        }), xs$2, p.activatableMultiEntry);
  var xs$4 = Ley_List$OptolithClient.Foldable.foldr((function (x) {
          var partial_arg = {
            TAG: /* ActivatableMultiSelect */8,
            _0: x
          };
          return function (param) {
            return Ley_List$OptolithClient.cons(partial_arg, param);
          };
        }), xs$3, p.activatableMultiSelect);
  var xs$5 = Ley_List$OptolithClient.Foldable.foldr((function (x) {
          var partial_arg = {
            TAG: /* Increasable */9,
            _0: x
          };
          return function (param) {
            return Ley_List$OptolithClient.cons(partial_arg, param);
          };
        }), xs$4, p.increasable);
  return Ley_List$OptolithClient.Foldable.foldr((function (x) {
                var partial_arg = {
                  TAG: /* IncreasableMultiEntry */10,
                  _0: x
                };
                return function (param) {
                  return Ley_List$OptolithClient.cons(partial_arg, param);
                };
              }), xs$5, p.increasableMultiEntry);
}

function getFirstLevelPrerequisites(prerequisites) {
  return flattenPrerequisites({
              sex: prerequisites.sex,
              race: prerequisites.race,
              culture: prerequisites.culture,
              pact: prerequisites.pact,
              social: prerequisites.social,
              primaryAttribute: prerequisites.primaryAttribute,
              activatable: prerequisites.activatable,
              activatableMultiEntry: prerequisites.activatableMultiEntry,
              activatableMultiSelect: prerequisites.activatableMultiSelect,
              increasable: prerequisites.increasable,
              increasableMultiEntry: prerequisites.increasableMultiEntry
            }, /* [] */0);
}

function getFirstDisAdvLevelPrerequisites(p) {
  return (
            p.commonSuggestedByRCP ? (function (param) {
                  return Ley_List$OptolithClient.cons(/* CommonSuggestedByRCP */0, param);
                }) : Ley_Function$OptolithClient.id
          )(flattenPrerequisites({
                  sex: p.sex,
                  race: p.race,
                  culture: p.culture,
                  pact: p.pact,
                  social: p.social,
                  primaryAttribute: p.primaryAttribute,
                  activatable: p.activatable,
                  activatableMultiEntry: p.activatableMultiEntry,
                  activatableMultiSelect: p.activatableMultiSelect,
                  increasable: p.increasable,
                  increasableMultiEntry: p.increasableMultiEntry
                }, /* [] */0));
}

function flattenPrerequisitesRange(oldLevel, newLevel, prerequisites) {
  if (Curry._1(Ley_IntMap$OptolithClient.$$null, prerequisites.levels)) {
    return getFirstLevelPrerequisites(prerequisites);
  } else {
    return Curry._3(Ley_IntMap$OptolithClient.IntMap.Foldable.foldr, flattenPrerequisites, getFirstLevelPrerequisites(prerequisites), filterApplicableLevels(oldLevel, newLevel, prerequisites.levels));
  }
}

function getEntrySpecificDynamicPrerequisites(isEntryToAdd, staticData, staticEntry, heroEntry, singleEntry) {
  var sid = Activatable_SelectOptions$OptolithClient.getOption1(singleEntry);
  var sid2 = Activatable_SelectOptions$OptolithClient.getOption2(singleEntry);
  switch (staticEntry.TAG | 0) {
    case /* Advantage */0 :
        var match = Id$OptolithClient.advantageFromInt(staticEntry._0.id);
        if (typeof match === "number") {
          if (match < 5) {
            if (match > 3 || match < 1) {
              return {
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            HASH: /* Disadvantage */255955901,
                            VAL: Id$OptolithClient.disadvantageToInt(/* Incompetent */18)
                          },
                          active: false,
                          sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                          sid2: undefined,
                          level: undefined
                        }
                      },
                      tl: /* [] */0
                    };
            } else {
              return /* [] */0;
            }
          } else if (match !== 13) {
            return /* [] */0;
          } else {
            return {
                    hd: {
                      TAG: /* Activatable */6,
                      _0: {
                        id: {
                          HASH: /* Disadvantage */255955901,
                          VAL: Id$OptolithClient.disadvantageToInt(/* MagicalRestriction */5)
                        },
                        active: false,
                        sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                        sid2: undefined,
                        level: undefined
                      }
                    },
                    tl: /* [] */0
                  };
          }
        } else {
          return /* [] */0;
        }
    case /* Disadvantage */1 :
        var match$1 = Id$OptolithClient.disadvantageFromInt(staticEntry._0.id);
        if (typeof match$1 === "number") {
          if (match$1 !== 5) {
            if (match$1 !== 18) {
              return /* [] */0;
            } else {
              return {
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            HASH: /* Advantage */-41058677,
                            VAL: Id$OptolithClient.advantageToInt(/* Aptitude */0)
                          },
                          active: false,
                          sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                          sid2: undefined,
                          level: undefined
                        }
                      },
                      tl: {
                        hd: {
                          TAG: /* Activatable */6,
                          _0: {
                            id: {
                              HASH: /* Advantage */-41058677,
                              VAL: Id$OptolithClient.advantageToInt(/* ExceptionalSkill */4)
                            },
                            active: false,
                            sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                            sid2: undefined,
                            level: undefined
                          }
                        },
                        tl: /* [] */0
                      }
                    };
            }
          } else {
            return {
                    hd: {
                      TAG: /* Activatable */6,
                      _0: {
                        id: {
                          HASH: /* Advantage */-41058677,
                          VAL: Id$OptolithClient.advantageToInt(/* MagicalAttunement */13)
                        },
                        active: false,
                        sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                        sid2: undefined,
                        level: undefined
                      }
                    },
                    tl: /* [] */0
                  };
          }
        } else {
          return /* [] */0;
        }
    case /* SpecialAbility */2 :
        var match$2 = Id$OptolithClient.specialAbilityFromInt(staticEntry._0.id);
        if (typeof match$2 !== "number") {
          return /* [] */0;
        }
        if (match$2 >= 71) {
          if (match$2 !== 76) {
            if (match$2 >= 72) {
              return /* [] */0;
            } else {
              return {
                      hd: {
                        TAG: /* Activatable */6,
                        _0: {
                          id: {
                            HASH: /* SpecialAbility */-789492591,
                            VAL: Id$OptolithClient.specialAbilityToInt(/* Language */6)
                          },
                          active: true,
                          sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                          sid2: undefined,
                          level: 3
                        }
                      },
                      tl: /* [] */0
                    };
            }
          } else {
            return Ley_Option$OptolithClient.option(/* [] */0, (function (ids) {
                          return {
                                  hd: {
                                    TAG: /* ActivatableMultiEntry */7,
                                    _0: {
                                      id: {
                                        TAG: /* SpecialAbilities */2,
                                        _0: ids
                                      },
                                      active: true,
                                      sid: undefined,
                                      sid2: undefined,
                                      level: undefined
                                    }
                                  },
                                  tl: /* [] */0
                                };
                        }), Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Curry._3(Ley_IntMap$OptolithClient.IntMap.Foldable.foldr, (function (x) {
                                  if (!x.canLearnRituals) {
                                    return Ley_Function$OptolithClient.id;
                                  }
                                  var partial_arg = x.id;
                                  return function (param) {
                                    return Ley_List$OptolithClient.cons(partial_arg, param);
                                  };
                                }), /* [] */0, staticData.magicalTraditions)));
          }
        }
        if (match$2 !== 46) {
          if (match$2 >= 26) {
            return /* [] */0;
          }
          switch (match$2) {
            case /* SkillSpecialization */0 :
                var sameSkillActiveCount = Ley_Option$OptolithClient.option(0, (function (heroEntry) {
                        return Ley_List$OptolithClient.countBy((function (x) {
                                      return Caml_obj.caml_equal(Ley_Option$OptolithClient.listToOption(x.options), sid);
                                    }), heroEntry.active);
                      }), heroEntry);
                var sameSkillDependency = sid !== undefined && !(typeof sid === "number" || sid.HASH !== 290194801) ? ({
                      TAG: /* Increasable */9,
                      _0: {
                        id: sid,
                        value: Math.imul(sameSkillActiveCount + (
                              isEntryToAdd ? 1 : 0
                            ) | 0, 6)
                      }
                    }) : undefined;
                return Ley_List$OptolithClient.append(Ley_Option$OptolithClient.optionToList(sameSkillDependency), Ley_Option$OptolithClient.optionToList(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(sid, (function (param) {
                                          return Activatable_SelectOptions$OptolithClient.getSelectOption(staticEntry, param);
                                        })), (function (option) {
                                      var match = option.wikiEntry;
                                      var tmp;
                                      tmp = match !== undefined && match.TAG === /* Skill */4 ? Caml_option.some(match._0.applications) : undefined;
                                      return Ley_Option$OptolithClient.Monad.$great$great$eq(tmp, (function (appMp) {
                                                    var tmp;
                                                    if (sid2 !== undefined && !(typeof sid2 === "number" || sid2.HASH !== 61643255)) {
                                                      var id = sid2.VAL;
                                                      tmp = Curry._2(Ley_IntMap$OptolithClient.IntMap.Foldable.find, (function (app) {
                                                              return app.id === id;
                                                            }), appMp);
                                                    } else {
                                                      tmp = undefined;
                                                    }
                                                    return Ley_Option$OptolithClient.Monad.$great$great$eq(tmp, (function (app) {
                                                                  return Ley_Option$OptolithClient.Functor.$less$amp$great(app.prerequisite, (function (prerequisite) {
                                                                                return {
                                                                                        TAG: /* Activatable */6,
                                                                                        _0: prerequisite
                                                                                      };
                                                                              }));
                                                                }));
                                                  }));
                                    }))));
            case /* PropertyFocus */11 :
                return {
                        hd: {
                          TAG: /* Activatable */6,
                          _0: {
                            id: {
                              HASH: /* SpecialAbility */-789492591,
                              VAL: Id$OptolithClient.specialAbilityToInt(/* PropertyKnowledge */10)
                            },
                            active: true,
                            sid: Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId),
                            sid2: undefined,
                            level: undefined
                          }
                        },
                        tl: /* [] */0
                      };
            case /* AdaptionZauber */16 :
                if (sid !== undefined && !(typeof sid === "number" || sid.HASH !== 345443720)) {
                  return {
                          hd: {
                            TAG: /* Increasable */9,
                            _0: {
                              id: sid,
                              value: 10
                            }
                          },
                          tl: /* [] */0
                        };
                } else {
                  return /* [] */0;
                }
            case /* FavoriteSpellwork */18 :
                if (sid !== undefined && !(typeof sid === "number" || sid.HASH !== 345443720)) {
                  return {
                          hd: {
                            TAG: /* Increasable */9,
                            _0: {
                              id: sid,
                              value: 0
                            }
                          },
                          tl: /* [] */0
                        };
                } else {
                  return /* [] */0;
                }
            case /* TerrainKnowledge */1 :
            case /* CraftInstruments */2 :
            case /* Hunter */3 :
            case /* AreaKnowledge */4 :
            case /* Literacy */5 :
            case /* Language */6 :
            case /* CombatReflexes */7 :
            case /* ImprovedDodge */8 :
            case /* TraditionGuildMages */9 :
            case /* PropertyKnowledge */10 :
            case /* AspectKnowledge */12 :
            case /* TraditionChurchOfPraios */13 :
            case /* Feuerschlucker */14 :
            case /* CombatStyleCombination */15 :
            case /* Exorzist */17 :
            case /* TraditionWitches */19 :
            case /* MagicStyleCombination */20 :
            case /* Harmoniezauberei */21 :
            case /* Matrixzauberei */22 :
            case /* TraditionElves */23 :
            case /* TraditionDruids */24 :
                return /* [] */0;
            case /* SpellEnhancement */25 :
                break;
            
          }
        }
        return Ley_Option$OptolithClient.fromOption(/* [] */0, Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(sid, (function (param) {
                              return Activatable_SelectOptions$OptolithClient.getSelectOption(staticEntry, param);
                            })), (function (option) {
                          return Ley_Option$OptolithClient.Monad.liftM2((function (target, level) {
                                        return {
                                                hd: {
                                                  TAG: /* Increasable */9,
                                                  _0: {
                                                    id: match$2 === /* SpellEnhancement */25 ? ({
                                                          HASH: /* Spell */345443720,
                                                          VAL: target
                                                        }) : ({
                                                          HASH: /* LiturgicalChant */-384382742,
                                                          VAL: target
                                                        }),
                                                    value: (level << 2) + 4 | 0
                                                  }
                                                },
                                                tl: /* [] */0
                                              };
                                      }), option.enhancementTarget, option.enhancementLevel);
                        })));
        break;
    
  }
}

function getDynamicPrerequisites(isEntryToAdd, staticData, staticEntry, heroEntry, singleEntry) {
  var sid = Activatable_SelectOptions$OptolithClient.getOption1(singleEntry);
  var entrySpecifics = getEntrySpecificDynamicPrerequisites(isEntryToAdd, staticData, staticEntry, heroEntry, singleEntry);
  var selectOptionSpecifics = Ley_Option$OptolithClient.option(/* [] */0, (function (sid) {
          var tmp;
          switch (staticEntry.TAG | 0) {
            case /* Advantage */0 :
            case /* Disadvantage */1 :
                tmp = staticEntry._0.selectOptions;
                break;
            case /* SpecialAbility */2 :
                tmp = staticEntry._0.selectOptions;
                break;
            
          }
          return Ley_Option$OptolithClient.option(/* [] */0, (function (option) {
                        return flattenPrerequisites(option.prerequisites, /* [] */0);
                      }), Curry._2(SelectOption$OptolithClient.SelectOptionMap.lookup, sid, tmp));
        }), Ley_Option$OptolithClient.Monad.$great$great$eq(sid, Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId));
  return Pervasives.$at(selectOptionSpecifics, entrySpecifics);
}

function getRaceCultureProfession(staticData, hero) {
  var match = hero.race;
  var partial_arg = staticData.races;
  var id = hero.culture;
  var partial_arg$1 = staticData.cultures;
  var match$1 = hero.profession;
  var partial_arg$2 = staticData.professions;
  return [
          Ley_Option$OptolithClient.Monad.$great$great$eq(match !== undefined ? match._0 : undefined, (function (param) {
                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg, param);
                })),
          Ley_Option$OptolithClient.Monad.$great$great$eq(id !== undefined ? id : undefined, (function (param) {
                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg$1, param);
                })),
          Ley_Option$OptolithClient.Monad.$great$great$eq(match$1 !== undefined ? match$1._0 : undefined, (function (param) {
                  return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg$2, param);
                }))
        ];
}

function hasSamePactCategory(current, prerequisite) {
  return prerequisite.category === current.category;
}

function hasNeededPactType(current, prerequisite) {
  var match = prerequisite.category;
  if (match !== 1) {
    return true;
  } else {
    return current.type === 3;
  }
}

function hasNeededPactDomain(current, prerequisite) {
  var match = prerequisite.domain;
  var match$1 = current.domain;
  if (match !== undefined) {
    if (match.TAG) {
      if (match$1.TAG) {
        return false;
      } else {
        return Ley_List$OptolithClient.elem(match$1._0, match._0);
      }
    } else if (match$1.TAG) {
      return false;
    } else {
      return match$1._0 === match._0;
    }
  } else {
    return true;
  }
}

function getPrimaryAttributeId(staticData, heroSpecialAbilities, scope) {
  if (scope) {
    return Tradition$OptolithClient.Blessed.getPrimaryAttributeId(staticData, heroSpecialAbilities);
  } else {
    return Tradition$OptolithClient.Magical.getPrimaryAttributeId(staticData, heroSpecialAbilities);
  }
}

function hasIncreasableMinValue(current, param) {
  var id = param.id;
  var variant = id.HASH;
  var minValue = param.value;
  if (variant !== -384382742) {
    if (variant >= 345443720) {
      if (variant >= 482562044) {
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      return x.value >= minValue;
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.attributes));
      } else {
        return Ley_Option$OptolithClient.option(false, (function (x) {
                      var value = x.value;
                      if (value) {
                        return value._0 >= minValue;
                      } else {
                        return false;
                      }
                    }), Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.spells));
      }
    } else if (variant >= 290194801) {
      return Ley_Option$OptolithClient.option(false, (function (x) {
                    return x.value >= minValue;
                  }), Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.skills));
    } else {
      return Ley_Option$OptolithClient.option(false, (function (x) {
                    return x.value >= minValue;
                  }), Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.combatTechniques));
    }
  } else {
    return Ley_Option$OptolithClient.option(false, (function (x) {
                  var value = x.value;
                  if (value) {
                    return value._0 >= minValue;
                  } else {
                    return false;
                  }
                }), Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.liturgicalChants));
  }
}

function isSafeSidValid(single, index, sid) {
  return Ley_Option$OptolithClient.option(false, (function (param) {
                return sid === param;
              }), Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_List$OptolithClient.Safe.atMay(single.options, index), Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId));
}

function isSidValid(single, index, sid) {
  if (sid !== undefined) {
    return isSafeSidValid(single, index, sid);
  } else {
    return true;
  }
}

function isLevelValid(single, level) {
  if (level !== undefined) {
    return Ley_Option$OptolithClient.option(false, (function (param) {
                  return level === param;
                }), single.level);
  } else {
    return true;
  }
}

function isSingleActivatableValid(current, param) {
  var level = param.level;
  var sid2 = param.sid2;
  var sid = param.sid;
  var active = param.active;
  var id = param.id;
  var variant = id.HASH;
  var heroEntry = variant !== -41058677 ? (
      variant >= 255955901 ? Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.disadvantages) : Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.specialAbilities)
    ) : Curry._2(Ley_IntMap$OptolithClient.lookup, id.VAL, current.advantages);
  if (heroEntry !== undefined) {
    return Ley_List$OptolithClient.Foldable.any((function (single) {
                  if (isSidValid(single, 0, sid) && isSidValid(single, 1, sid2)) {
                    return isLevelValid(single, level);
                  } else {
                    return false;
                  }
                }), heroEntry.active) === active;
  } else {
    return !active;
  }
}

function isPrerequisiteMet(staticData, hero, sourceId, prerequisite) {
  if (typeof prerequisite === "number") {
    var match = getRaceCultureProfession(staticData, hero);
    var profession = match[2];
    var culture = match[1];
    var race = match[0];
    if (typeof sourceId === "number") {
      return false;
    }
    var variant = sourceId.HASH;
    if (variant !== -41058677) {
      if (variant !== 255955901) {
        return false;
      }
      var id = sourceId.VAL;
      if (Ley_Option$OptolithClient.option(false, (function (race) {
                return Ley_List$OptolithClient.elem(id, race.stronglyRecommendedDisadvantages) ? true : Ley_List$OptolithClient.elem(id, race.commonDisadvantages);
              }), race) || Ley_Option$OptolithClient.option(false, (function (culture) {
                return Ley_List$OptolithClient.elem(id, culture.commonDisadvantages);
              }), culture)) {
        return true;
      } else {
        return Ley_Option$OptolithClient.option(false, (function (profession) {
                      return Ley_List$OptolithClient.elem(id, profession.suggestedDisadvantages);
                    }), profession);
      }
    }
    var id$1 = sourceId.VAL;
    if (Ley_Option$OptolithClient.option(false, (function (race) {
              return Ley_List$OptolithClient.elem(id$1, race.automaticAdvantages) || Ley_List$OptolithClient.elem(id$1, race.stronglyRecommendedAdvantages) ? true : Ley_List$OptolithClient.elem(id$1, race.commonAdvantages);
            }), race) || Ley_Option$OptolithClient.option(false, (function (culture) {
              return Ley_List$OptolithClient.elem(id$1, culture.commonAdvantages);
            }), culture)) {
      return true;
    } else {
      return Ley_Option$OptolithClient.option(false, (function (profession) {
                    return Ley_List$OptolithClient.elem(id$1, profession.suggestedAdvantages);
                  }), profession);
    }
  }
  switch (prerequisite.TAG | 0) {
    case /* Sex */0 :
        return hero.sex === prerequisite._0;
    case /* Race */1 :
        var prerequisite$1 = prerequisite._0;
        var match$1 = hero.race;
        if (match$1 === undefined) {
          return false;
        }
        var requiredId = prerequisite$1.id;
        if (requiredId.TAG) {
          return Ley_List$OptolithClient.elem(match$1._0, prerequisite$1.id._0) === prerequisite$1.active;
        } else {
          return requiredId._0 === match$1._0 === prerequisite$1.active;
        }
    case /* Culture */2 :
        var prerequisite$2 = prerequisite._0;
        var match$2 = hero.culture;
        if (match$2 !== undefined) {
          if (prerequisite$2.TAG) {
            return Ley_List$OptolithClient.elem(match$2, prerequisite$2._0);
          } else {
            return prerequisite$2._0 === match$2;
          }
        } else {
          return false;
        }
    case /* Pact */3 :
        var prerequisite$3 = prerequisite._0;
        var pact = hero.pact;
        if (pact !== undefined && Pacts$OptolithClient.isPactFromStateValid(pact) && hasSamePactCategory(pact, prerequisite$3) && hasNeededPactType(pact, prerequisite$3) && hasNeededPactDomain(pact, prerequisite$3)) {
          var requiredLevel = prerequisite$3.level;
          if (requiredLevel !== undefined && requiredLevel > pact.level) {
            if (requiredLevel <= 1) {
              return pact.level === 0;
            } else {
              return false;
            }
          } else {
            return true;
          }
        } else {
          return false;
        }
    case /* Social */4 :
        var prerequisite$4 = prerequisite._0;
        var socialStatus = hero.personalData.socialStatus;
        if (socialStatus !== undefined) {
          return socialStatus >= prerequisite$4;
        } else {
          return false;
        }
    case /* PrimaryAttribute */5 :
        var prerequisite$5 = prerequisite._0;
        var partial_arg = hero.attributes;
        var attr = Ley_Option$OptolithClient.Monad.$great$great$eq(getPrimaryAttributeId(staticData, hero.specialAbilities, prerequisite$5.scope), (function (param) {
                return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg, param);
              }));
        return Ley_Option$OptolithClient.option(8, (function (attr) {
                      return attr.value;
                    }), attr) >= prerequisite$5.value;
    case /* Activatable */6 :
        return isSingleActivatableValid(hero, prerequisite._0);
    case /* ActivatableMultiEntry */7 :
        var param = prerequisite._0;
        var level = param.level;
        var sid2 = param.sid2;
        var sid = param.sid;
        var active = param.active;
        var ids = param.id;
        var tmp;
        switch (ids.TAG | 0) {
          case /* Advantages */0 :
              tmp = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* Advantage */-41058677,
                              VAL: id
                            };
                    }), ids._0);
              break;
          case /* Disadvantages */1 :
              tmp = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* Disadvantage */255955901,
                              VAL: id
                            };
                    }), ids._0);
              break;
          case /* SpecialAbilities */2 :
              tmp = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* SpecialAbility */-789492591,
                              VAL: id
                            };
                    }), ids._0);
              break;
          
        }
        return Ley_List$OptolithClient.Foldable.any((function (id) {
                      return isSingleActivatableValid(hero, {
                                  id: id,
                                  active: active,
                                  sid: sid,
                                  sid2: sid2,
                                  level: level
                                });
                    }), tmp);
    case /* ActivatableMultiSelect */8 :
        var param$1 = prerequisite._0;
        var level$1 = param$1.level;
        var sid2$1 = param$1.sid2;
        var sids = param$1.sid;
        var active$1 = param$1.active;
        var id$2 = param$1.id;
        var variant$1 = id$2.HASH;
        var heroEntry = variant$1 !== -41058677 ? (
            variant$1 >= 255955901 ? Curry._2(Ley_IntMap$OptolithClient.lookup, id$2.VAL, hero.disadvantages) : Curry._2(Ley_IntMap$OptolithClient.lookup, id$2.VAL, hero.specialAbilities)
          ) : Curry._2(Ley_IntMap$OptolithClient.lookup, id$2.VAL, hero.advantages);
        if (heroEntry !== undefined) {
          return Ley_List$OptolithClient.Foldable.any((function (single) {
                        if (Ley_List$OptolithClient.Foldable.any((function (param) {
                                  return isSafeSidValid(single, 0, param);
                                }), sids) && isSidValid(single, 1, sid2$1)) {
                          return isLevelValid(single, level$1);
                        } else {
                          return false;
                        }
                      }), heroEntry.active) === active$1;
        } else {
          return !active$1;
        }
    case /* Increasable */9 :
        return hasIncreasableMinValue(hero, prerequisite._0);
    case /* IncreasableMultiEntry */10 :
        var param$2 = prerequisite._0;
        var value = param$2.value;
        var ids$1 = param$2.id;
        var tmp$1;
        switch (ids$1.TAG | 0) {
          case /* Attributes */0 :
              tmp$1 = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* Attribute */482562044,
                              VAL: id
                            };
                    }), ids$1._0);
              break;
          case /* Skills */1 :
              tmp$1 = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* Skill */290194801,
                              VAL: id
                            };
                    }), ids$1._0);
              break;
          case /* CombatTechniques */2 :
              tmp$1 = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* CombatTechnique */-920806756,
                              VAL: id
                            };
                    }), ids$1._0);
              break;
          case /* Spells */3 :
              tmp$1 = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* Spell */345443720,
                              VAL: id
                            };
                    }), ids$1._0);
              break;
          case /* LiturgicalChants */4 :
              tmp$1 = Ley_List$OptolithClient.map((function (id) {
                      return {
                              HASH: /* LiturgicalChant */-384382742,
                              VAL: id
                            };
                    }), ids$1._0);
              break;
          
        }
        return Ley_List$OptolithClient.Foldable.any((function (id) {
                      return hasIncreasableMinValue(hero, {
                                  id: id,
                                  value: value
                                });
                    }), tmp$1);
    
  }
}

function arePrerequisitesMet(staticData, hero, sourceId, prerequisites) {
  return Ley_List$OptolithClient.Foldable.all((function (param) {
                return isPrerequisiteMet(staticData, hero, sourceId, param);
              }), prerequisites);
}

var Flatten = {
  flattenPrerequisites: flattenPrerequisites,
  getFirstLevelPrerequisites: getFirstLevelPrerequisites,
  getFirstDisAdvLevelPrerequisites: getFirstDisAdvLevelPrerequisites,
  flattenPrerequisitesRange: flattenPrerequisitesRange
};

var Dynamic = {
  getDynamicPrerequisites: getDynamicPrerequisites
};

var Validation = {
  isPrerequisiteMet: isPrerequisiteMet,
  arePrerequisitesMet: arePrerequisitesMet
};

export {
  Flatten ,
  Dynamic ,
  Validation ,
  
}
/* Tradition-OptolithClient Not a pure module */
