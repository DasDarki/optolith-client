// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";

function partial_arg_0(param) {
  return Json_decode.map((function (id) {
                return {
                        TAG: /* One */0,
                        _0: id
                      };
              }), Json_decode.$$int, param);
}

var partial_arg_1 = {
  hd: (function (param) {
      return Json_decode.map((function (id) {
                    return {
                            TAG: /* Many */1,
                            _0: id
                          };
                  }), (function (param) {
                    return Json_decode.list(Json_decode.$$int, param);
                  }), param);
    }),
  tl: /* [] */0
};

var partial_arg = {
  hd: partial_arg_0,
  tl: partial_arg_1
};

function oneOrManyInt(param) {
  return Json_decode.oneOf(partial_arg, param);
}

function decode(json) {
  var str = Json_decode.string(json);
  switch (str) {
    case "f" :
        return /* Female */1;
    case "m" :
        return /* Male */0;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown sex prerequisite: " + str,
            Error: new Error()
          };
  }
}

var Sex = {
  decode: decode
};

function partial_arg_0$1(json) {
  return {
          id: oneOrManyInt(json),
          active: true
        };
}

var partial_arg_1$1 = {
  hd: (function (json) {
      return {
              id: Json_decode.field("id", oneOrManyInt, json),
              active: Json_decode.field("active", Json_decode.bool, json)
            };
    }),
  tl: /* [] */0
};

var partial_arg$1 = {
  hd: partial_arg_0$1,
  tl: partial_arg_1$1
};

function decode$1(param) {
  return Json_decode.oneOf(partial_arg$1, param);
}

var Race = {
  decode: decode$1
};

var Culture = {
  decode: oneOrManyInt
};

var SocialStatus = {
  decode: Json_decode.$$int
};

function decode$2(json) {
  return {
          category: JsonStrict$OptolithClient.field("category", JsonStrict$OptolithClient.$$int, json),
          domain: JsonStrict$OptolithClient.optionalField("domain", oneOrManyInt, json),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

var Pact = {
  decode: decode$2
};

function decode$3(json) {
  var str = Json_decode.field("type", Json_decode.string, json);
  var tmp;
  switch (str) {
    case "blessed" :
        tmp = /* Blessed */1;
        break;
    case "magical" :
        tmp = /* Magical */0;
        break;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown primary attribute type: " + str,
            Error: new Error()
          };
  }
  return {
          value: Json_decode.field("value", Json_decode.$$int, json),
          scope: tmp
        };
}

var PrimaryAttribute = {
  decode: decode$3
};

function decode$4(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", Id$OptolithClient.Activatable.Decode.t, json),
          active: JsonStrict$OptolithClient.field("active", JsonStrict$OptolithClient.bool, json),
          options: JsonStrict$OptolithClient.field("options", (function (param) {
                  return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                }), json),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

var Activatable = {
  decode: decode$4
};

function decodeList(f, json) {
  return Curry._1(f, Json_decode.field("value", (function (param) {
                    return Json_decode.list(Json_decode.$$int, param);
                  }), json));
}

function decodeIds(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Advantage" :
                      return function (param) {
                        return decodeList((function (xs) {
                                      return {
                                              TAG: /* Advantages */0,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "Disadvantage" :
                      return function (param) {
                        return decodeList((function (xs) {
                                      return {
                                              TAG: /* Disadvantages */1,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "SpecialAbility" :
                      return function (param) {
                        return decodeList((function (xs) {
                                      return {
                                              TAG: /* SpecialAbilities */2,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown activatable ID scope: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("scope", Json_decode.string, param);
              }), param);
}

function decode$5(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", decodeIds, json),
          active: JsonStrict$OptolithClient.field("active", JsonStrict$OptolithClient.bool, json),
          options: JsonStrict$OptolithClient.field("options", (function (param) {
                  return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                }), json),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

function decode$6(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", Id$OptolithClient.Activatable.Decode.t, json),
          active: JsonStrict$OptolithClient.field("active", JsonStrict$OptolithClient.bool, json),
          firstOption: JsonStrict$OptolithClient.field("firstOption", (function (param) {
                  return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                }), json),
          otherOptions: JsonStrict$OptolithClient.field("otherOptions", (function (param) {
                  return JsonStrict$OptolithClient.list(Id$OptolithClient.Activatable.SelectOption.Decode.t, param);
                }), json),
          level: JsonStrict$OptolithClient.optionalField("level", JsonStrict$OptolithClient.$$int, json)
        };
}

var ActivatableMultiSelect = {
  decode: decode$6
};

function decode$7(json) {
  return {
          id: Json_decode.field("id", Id$OptolithClient.Increasable.Decode.t, json),
          value: Json_decode.field("value", Json_decode.$$int, json)
        };
}

var Increasable = {
  decode: decode$7
};

function decodeList$1(f, json) {
  return Curry._1(f, Json_decode.field("value", (function (param) {
                    return Json_decode.list(Json_decode.$$int, param);
                  }), json));
}

function decodeIds$1(param) {
  return Json_decode.andThen((function (str) {
                switch (str) {
                  case "Attribute" :
                      return function (param) {
                        return decodeList$1((function (xs) {
                                      return {
                                              TAG: /* Attributes */0,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "CombatTechnique" :
                      return function (param) {
                        return decodeList$1((function (xs) {
                                      return {
                                              TAG: /* CombatTechniques */2,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "LiturgicalChant" :
                      return function (param) {
                        return decodeList$1((function (xs) {
                                      return {
                                              TAG: /* LiturgicalChants */4,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "Skill" :
                      return function (param) {
                        return decodeList$1((function (xs) {
                                      return {
                                              TAG: /* Skills */1,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  case "Spell" :
                      return function (param) {
                        return decodeList$1((function (xs) {
                                      return {
                                              TAG: /* Spells */3,
                                              _0: xs
                                            };
                                    }), param);
                      };
                  default:
                    throw {
                          RE_EXN_ID: Json_decode.DecodeError,
                          _1: "Unknown increasable ID scope: " + str,
                          Error: new Error()
                        };
                }
              }), (function (param) {
                return Json_decode.field("scope", Json_decode.string, param);
              }), param);
}

function decode$8(json) {
  return {
          id: Json_decode.field("id", decodeIds$1, json),
          value: Json_decode.field("value", Json_decode.$$int, json)
        };
}

function decode$9(decoder) {
  return function (param) {
    return Json_decode.andThen((function (str) {
                  switch (str) {
                    case "ByLevel" :
                        return function (json) {
                          var xs = Json_decode.list((function (json) {
                                  return [
                                          Json_decode.field("level", Json_decode.$$int, json),
                                          Json_decode.field("prerequisites", (function (param) {
                                                  return Json_decode.list(decoder, param);
                                                }), json)
                                        ];
                                }), json);
                          return {
                                  TAG: /* ByLevel */1,
                                  _0: Curry._1(Ley_IntMap$OptolithClient.fromList, xs)
                                };
                        };
                    case "Plain" :
                        return function (json) {
                          return {
                                  TAG: /* Plain */0,
                                  _0: Json_decode.list(decoder, json)
                                };
                        };
                    default:
                      throw {
                            RE_EXN_ID: Json_decode.DecodeError,
                            _1: "Unknown prerequisite list type: " + str,
                            Error: new Error()
                          };
                  }
                }), (function (param) {
                  return Json_decode.field("type", Json_decode.string, param);
                }), param);
  };
}

function decode$10(json) {
  return Ley_Option$OptolithClient.fromOption(/* Generate */0, JsonStrict$OptolithClient.optionalField("displayOption", (function (param) {
                    return JsonStrict$OptolithClient.andThen((function (str) {
                                  switch (str) {
                                    case "ByLevel" :
                                        return function (json) {
                                          return /* ReplaceWith */{
                                                  _0: JsonStrict$OptolithClient.field("value", JsonStrict$OptolithClient.string, json)
                                                };
                                        };
                                    case "Hide" :
                                        return function (param) {
                                          return /* Hide */1;
                                        };
                                    default:
                                      throw {
                                            RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
                                            _1: "Unknown display option type: " + str,
                                            Error: new Error()
                                          };
                                  }
                                }), (function (param) {
                                  return JsonStrict$OptolithClient.field("type", JsonStrict$OptolithClient.string, param);
                                }), param);
                  }), json));
}

function decodeSingle(decoder, wrap, json) {
  return Curry._2(wrap, Json_decode.field("value", decoder, json), decode$10(json));
}

var decode$11 = decode$9(function (param) {
      return Json_decode.andThen((function (str) {
                    switch (str) {
                      case "Activatable" :
                          return function (param) {
                            return decodeSingle(decode$4, (function (v, d) {
                                          return {
                                                  TAG: /* Activatable */3,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Culture" :
                          return function (param) {
                            return decodeSingle(oneOrManyInt, (function (v, d) {
                                          return {
                                                  TAG: /* Culture */2,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Increasable" :
                          return function (param) {
                            return decodeSingle(decode$7, (function (v, d) {
                                          return {
                                                  TAG: /* Increasable */4,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Race" :
                          return function (param) {
                            return decodeSingle(decode$1, (function (v, d) {
                                          return {
                                                  TAG: /* Race */1,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Sex" :
                          return function (param) {
                            return decodeSingle(decode, (function (v, d) {
                                          return {
                                                  TAG: /* Sex */0,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      default:
                        throw {
                              RE_EXN_ID: Json_decode.DecodeError,
                              _1: "Unknown prerequisite type: " + str,
                              Error: new Error()
                            };
                    }
                  }), (function (param) {
                    return Json_decode.field("type", Json_decode.string, param);
                  }), param);
    });

var Profession = {
  decode: decode$11
};

var decode$12 = decode$9(function (param) {
      return Json_decode.andThen((function (str) {
                    switch (str) {
                      case "Activatable" :
                          return function (param) {
                            return decodeSingle(decode$4, (function (v, d) {
                                          return {
                                                  TAG: /* Activatable */6,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "ActivatableMultiEntry" :
                          return function (param) {
                            return decodeSingle(decode$5, (function (v, d) {
                                          return {
                                                  TAG: /* ActivatableMultiEntry */7,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "ActivatableMultiSelect" :
                          return function (param) {
                            return decodeSingle(decode$6, (function (v, d) {
                                          return {
                                                  TAG: /* ActivatableMultiSelect */8,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "CommonSuggestedByRCP" :
                          return function (param) {
                            return /* CommonSuggestedByRCP */0;
                          };
                      case "Culture" :
                          return function (param) {
                            return decodeSingle(oneOrManyInt, (function (v, d) {
                                          return {
                                                  TAG: /* Culture */2,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Increasable" :
                          return function (param) {
                            return decodeSingle(decode$7, (function (v, d) {
                                          return {
                                                  TAG: /* Increasable */9,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "IncreasableMultiEntry" :
                          return function (param) {
                            return decodeSingle(decode$8, (function (v, d) {
                                          return {
                                                  TAG: /* IncreasableMultiEntry */10,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Pact" :
                          return function (param) {
                            return decodeSingle(decode$2, (function (v, d) {
                                          return {
                                                  TAG: /* Pact */3,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "PrimaryAttribute" :
                          return function (param) {
                            return decodeSingle(decode$3, (function (v, d) {
                                          return {
                                                  TAG: /* PrimaryAttribute */5,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Race" :
                          return function (param) {
                            return decodeSingle(decode$1, (function (v, d) {
                                          return {
                                                  TAG: /* Race */1,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Sex" :
                          return function (param) {
                            return decodeSingle(decode, (function (v, d) {
                                          return {
                                                  TAG: /* Sex */0,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "SocialStatus" :
                          return function (param) {
                            return decodeSingle(Json_decode.$$int, (function (v, d) {
                                          return {
                                                  TAG: /* SocialStatus */4,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      default:
                        throw {
                              RE_EXN_ID: Json_decode.DecodeError,
                              _1: "Unknown prerequisite type: " + str,
                              Error: new Error()
                            };
                    }
                  }), (function (param) {
                    return Json_decode.field("type", Json_decode.string, param);
                  }), param);
    });

var AdvantageDisadvantage = {
  decode: decode$12
};

var decode$13 = decode$9(function (param) {
      return Json_decode.andThen((function (str) {
                    switch (str) {
                      case "Activatable" :
                          return function (param) {
                            return decodeSingle(decode$4, (function (v, d) {
                                          return {
                                                  TAG: /* Activatable */6,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "ActivatableMultiEntry" :
                          return function (param) {
                            return decodeSingle(decode$5, (function (v, d) {
                                          return {
                                                  TAG: /* ActivatableMultiEntry */7,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "ActivatableMultiSelect" :
                          return function (param) {
                            return decodeSingle(decode$6, (function (v, d) {
                                          return {
                                                  TAG: /* ActivatableMultiSelect */8,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Culture" :
                          return function (param) {
                            return decodeSingle(oneOrManyInt, (function (v, d) {
                                          return {
                                                  TAG: /* Culture */2,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Increasable" :
                          return function (param) {
                            return decodeSingle(decode$7, (function (v, d) {
                                          return {
                                                  TAG: /* Increasable */9,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "IncreasableMultiEntry" :
                          return function (param) {
                            return decodeSingle(decode$8, (function (v, d) {
                                          return {
                                                  TAG: /* IncreasableMultiEntry */10,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Pact" :
                          return function (param) {
                            return decodeSingle(decode$2, (function (v, d) {
                                          return {
                                                  TAG: /* Pact */3,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "PrimaryAttribute" :
                          return function (param) {
                            return decodeSingle(decode$3, (function (v, d) {
                                          return {
                                                  TAG: /* PrimaryAttribute */5,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Race" :
                          return function (param) {
                            return decodeSingle(decode$1, (function (v, d) {
                                          return {
                                                  TAG: /* Race */1,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "Sex" :
                          return function (param) {
                            return decodeSingle(decode, (function (v, d) {
                                          return {
                                                  TAG: /* Sex */0,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      case "SocialStatus" :
                          return function (param) {
                            return decodeSingle(Json_decode.$$int, (function (v, d) {
                                          return {
                                                  TAG: /* SocialStatus */4,
                                                  _0: v,
                                                  _1: d
                                                };
                                        }), param);
                          };
                      default:
                        throw {
                              RE_EXN_ID: Json_decode.DecodeError,
                              _1: "Unknown prerequisite type: " + str,
                              Error: new Error()
                            };
                    }
                  }), (function (param) {
                    return Json_decode.field("type", Json_decode.string, param);
                  }), param);
    });

var ActivatableMultiEntry = {
  decode: decode$5
};

var IncreasableMultiEntry = {
  decode: decode$8
};

var All = {};

var DisplayOption = {};

export {
  oneOrManyInt ,
  Sex ,
  Race ,
  Culture ,
  SocialStatus ,
  Pact ,
  PrimaryAttribute ,
  Activatable ,
  ActivatableMultiEntry ,
  ActivatableMultiSelect ,
  Increasable ,
  IncreasableMultiEntry ,
  All ,
  DisplayOption ,
  Profession ,
  AdvantageDisadvantage ,
  decode$13 as decode,
  
}
/* decode Not a pure module */
