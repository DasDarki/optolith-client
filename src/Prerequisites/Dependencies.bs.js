// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Id$OptolithClient from "../Misc/Id.bs.js";
import * as Hero$OptolithClient from "../Misc/Hero.bs.js";
import * as Ley_Bool$OptolithClient from "../Data/Ley_Bool.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Tradition$OptolithClient from "../Misc/Tradition.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Activatable_Convert$OptolithClient from "../Activatable/Activatable_Convert.bs.js";

function flattenSkillDependencies(getValueForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.TAG) {
                  return dep.value;
                }
                var isMatchedByOtherEntry = Ley_List$OptolithClient.Foldable.any((function (value) {
                        return value >= dep.value;
                      }), Ley_List$OptolithClient.map(getValueForTargetId, Ley_List$OptolithClient.$$delete(id, targets._0)));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep.value;
                }
              }), dependencies);
}

function flattenActivatableSkillDependencies(getValueForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.TAG) {
                  return dep.value;
                }
                var isMatchedByOtherEntry = Ley_List$OptolithClient.Foldable.any((function (value) {
                        if (value) {
                          return value._0 >= dep.value;
                        } else {
                          return false;
                        }
                      }), Ley_List$OptolithClient.map(getValueForTargetId, Ley_List$OptolithClient.$$delete(id, targets._0)));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep.value;
                }
              }), dependencies);
}

function flattenActivatableDependencies(getActiveListForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.TAG) {
                  return dep;
                }
                var isMatchedByOtherEntry = Ley_List$OptolithClient.Foldable.any((function (active) {
                        if (Ley_Option$OptolithClient.option(true, (function (level) {
                                  return Ley_Option$OptolithClient.option(!dep.active, (function (activeLevel) {
                                                return activeLevel >= level === dep.active;
                                              }), active.level);
                                }), dep.level)) {
                          return Ley_List$OptolithClient.Index.iall((function (i, option) {
                                        return Ley_Option$OptolithClient.option(false, (function (activeOption) {
                                                      if (option.TAG) {
                                                        return Ley_List$OptolithClient.elem(activeOption, option._0) === dep.active;
                                                      } else {
                                                        return Id$OptolithClient.SelectOption.$eq(activeOption, option._0) === dep.active;
                                                      }
                                                    }), Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_List$OptolithClient.Safe.atMay(active.options, i), Activatable_Convert$OptolithClient.activatableOptionToSelectOptionId));
                                      }), dep.options);
                        } else {
                          return false;
                        }
                      }), Ley_List$OptolithClient.Foldable.concatMap(getActiveListForTargetId, Ley_List$OptolithClient.$$delete(id, targets._0)));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep;
                }
              }), dependencies);
}

function getRequiredSelectOptions1(otherActivatables, x) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                return Ley_Option$OptolithClient.listToOption(dep.options);
              }), flattenActivatableDependencies((function (id) {
                    return Ley_Option$OptolithClient.option(/* [] */0, (function (x) {
                                  return x.active;
                                }), Curry._2(Ley_IntMap$OptolithClient.lookup, id, otherActivatables));
                  }), x.id, x.dependencies));
}

var Flatten = {
  flattenSkillDependencies: flattenSkillDependencies,
  flattenActivatableSkillDependencies: flattenActivatableSkillDependencies,
  flattenActivatableDependencies: flattenActivatableDependencies,
  getRequiredSelectOptions1: getRequiredSelectOptions1
};

function addAttributeDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.attributes = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Attribute.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.attributes);
  return newrecord;
}

function addSkillDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.skills = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Skill.emptySkill(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.skills);
  return newrecord;
}

function addCombatTechniqueDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.combatTechniques = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Skill.emptyCombatTechnique(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.combatTechniques);
  return newrecord;
}

function addSpellDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.spells = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.ActivatableSkill.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.spells);
  return newrecord;
}

function addLiturgicalChantDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.liturgicalChants = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.ActivatableSkill.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.liturgicalChants);
  return newrecord;
}

function addAdvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.advantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Activatable.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.advantages);
  return newrecord;
}

function addDisadvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.disadvantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Activatable.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.disadvantages);
  return newrecord;
}

function addSpecialAbilityDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.specialAbilities = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Activatable.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: {
                    hd: dep,
                    tl: heroEntry$1.dependencies
                  }
                };
        }), id, hero.specialAbilities);
  return newrecord;
}

function addAttributeDependency$1(dep, hero) {
  var id = dep.target;
  if (id.TAG) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addAttributeDependency(dep, param, param$1);
                }), hero, id._0);
  } else {
    return addAttributeDependency(dep, hero, id._0);
  }
}

function removeAttributeDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.attributes = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Attribute.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.attributes);
  return newrecord;
}

function removeSkillDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.skills = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Skill.isUnusedSkill(heroEntry);
                                    }), param);
                      }));
        }), id, hero.skills);
  return newrecord;
}

function removeCombatTechniqueDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.combatTechniques = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Skill.isUnusedCombatTechnique(heroEntry);
                                    }), param);
                      }));
        }), id, hero.combatTechniques);
  return newrecord;
}

function removeSpellDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.spells = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.ActivatableSkill.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.spells);
  return newrecord;
}

function removeLiturgicalChantDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.liturgicalChants = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.ActivatableSkill.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.liturgicalChants);
  return newrecord;
}

function removeAdvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.advantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Activatable.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.advantages);
  return newrecord;
}

function removeDisadvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.disadvantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Activatable.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.disadvantages);
  return newrecord;
}

function removeSpecialAbilityDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.specialAbilities = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Activatable.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.specialAbilities);
  return newrecord;
}

function removeAttributeDependency$1(dep, hero) {
  var id = dep.target;
  if (id.TAG) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeAttributeDependency(dep, param, param$1);
                }), hero, id._0);
  } else {
    return removeAttributeDependency(dep, hero, id._0);
  }
}

function isUnfamiliarSpell(transferredUnfamiliar, heroTraditions) {
  var isIntuitiveMageActive = Ley_List$OptolithClient.Foldable.any((function (param) {
          return param[0].id === Id$OptolithClient.SpecialAbility.toInt(/* TraditionIntuitiveMage */51);
        }), heroTraditions);
  if (isIntuitiveMageActive) {
    return function (param) {
      return Ley_Function$OptolithClient.$$const(false, param);
    };
  }
  var activeTraditionNumericIds = Ley_List$OptolithClient.cons(Id$OptolithClient.MagicalTradition.toInt(/* General */0), Ley_List$OptolithClient.Foldable.concatMap((function (param) {
              var trad = param[2];
              if (trad.id === Id$OptolithClient.SpecialAbility.toInt(/* TraditionGuildMages */9)) {
                return Ley_List$OptolithClient.cons(Id$OptolithClient.MagicalTradition.toInt(/* Qabalyamagier */10), Ley_Option$OptolithClient.optionToList(trad.numId));
              } else {
                return Ley_Option$OptolithClient.optionToList(trad.numId);
              }
            }), heroTraditions));
  return function (staticSpell) {
    if (Ley_List$OptolithClient.Foldable.all((function (tu) {
              var id = tu.id;
              return typeof id === "number" ? (
                        id === /* Spells */0 ? true : false
                      ) : (
                        id.TAG ? false : id._0 !== staticSpell.id
                      );
            }), transferredUnfamiliar)) {
      var param = staticSpell.traditions;
      return Ley_Bool$OptolithClient.notP((function (param) {
                    return Ley_List$OptolithClient.intersecting(activeTraditionNumericIds, param);
                  }), param);
    } else {
      return false;
    }
  };
}

function getTransferredUnfamiliarById(single) {
  var match = Id$OptolithClient.SpecialAbility.fromInt(single.id);
  if (typeof match !== "number") {
    return /* [] */0;
  }
  if (match >= 80) {
    if (match !== 91) {
      if (match !== 95) {
        return /* [] */0;
      } else {
        return {
                hd: {
                  id: /* Spells */0,
                  srcId: single.id
                },
                tl: /* [] */0
              };
      }
    }
    
  } else if (match >= 77) {
    if (match < 79) {
      return Ley_Option$OptolithClient.mapOption((function (param) {
                    if (typeof param === "number" || param.HASH !== 345443720) {
                      return ;
                    } else {
                      return {
                              id: {
                                TAG: /* Spell */0,
                                _0: param.VAL
                              },
                              srcId: single.id
                            };
                    }
                  }), Ley_List$OptolithClient.take(3, single.options));
    }
    
  } else if (match !== 9) {
    return /* [] */0;
  }
  var match$1 = single.options;
  if (!match$1) {
    return /* [] */0;
  }
  var match$2 = match$1.hd;
  if (typeof match$2 === "number" || match$2.HASH !== 345443720) {
    return /* [] */0;
  } else {
    return {
            hd: {
              id: {
                TAG: /* Spell */0,
                _0: match$2.VAL
              },
              srcId: single.id
            },
            tl: /* [] */0
          };
  }
}

function addTransferUnfamiliarDependencies(single, hero) {
  var xs = getTransferredUnfamiliarById(single);
  if (!xs) {
    return hero;
  }
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.transferredUnfamiliarSpells = Pervasives.$at(xs, hero.transferredUnfamiliarSpells);
  return newrecord;
}

function removeTradById(id, xs) {
  return Ley_List$OptolithClient.filter((function (param) {
                return param[0].id === id;
              }), xs);
}

function removeUnfamiliarDepsById(id, xs) {
  return Ley_List$OptolithClient.filter((function (x) {
                return x.srcId === id;
              }), xs);
}

function getUnfamiliarCountAfter(staticData, transferredUnfamiliar, heroTraditions, srcId, heroSpells) {
  var transferredUnfamiliar$1 = removeUnfamiliarDepsById(srcId, transferredUnfamiliar);
  var heroTraditions$1 = removeTradById(srcId, heroTraditions);
  return Ley_List$OptolithClient.countBy((function (heroSpell) {
                return Ley_Option$OptolithClient.option(false, isUnfamiliarSpell(transferredUnfamiliar$1, heroTraditions$1), Curry._2(Ley_IntMap$OptolithClient.lookup, heroSpell.id, staticData.spells));
              }), heroSpells);
}

function isEntryAllowingTransferUnfamiliarRemovable(staticData, hero) {
  var match = hero.phase;
  if (match >= 2) {
    return function (param) {
      return Ley_Function$OptolithClient.$$const(true, param);
    };
  }
  var heroTraditions = Tradition$OptolithClient.Magical.getEntries(staticData, hero.specialAbilities);
  var transferredUnfamiliar = hero.transferredUnfamiliarSpells;
  var spells = Curry._1(Ley_IntMap$OptolithClient.elems, hero.spells);
  return Ley_Option$OptolithClient.option((function (param) {
                return Ley_Function$OptolithClient.$$const(false, param);
              }), (function (el, srcId) {
                return el.maxUnfamiliarSpells >= getUnfamiliarCountAfter(staticData, transferredUnfamiliar, heroTraditions, srcId, spells);
              }), Curry._2(Ley_IntMap$OptolithClient.lookup, hero.experienceLevel, staticData.experienceLevels));
}

function putActivatableDependency(mode, category, dependency, hero) {
  if (mode) {
    switch (category) {
      case /* Advantages */0 :
          var id = dependency.target;
          if (id.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeAdvantageDependency(dependency, param, param$1);
                        }), hero, id._0);
          } else {
            return removeAdvantageDependency(dependency, hero, id._0);
          }
      case /* Disadvantages */1 :
          var id$1 = dependency.target;
          if (id$1.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeDisadvantageDependency(dependency, param, param$1);
                        }), hero, id$1._0);
          } else {
            return removeDisadvantageDependency(dependency, hero, id$1._0);
          }
      case /* SpecialAbilities */2 :
          var id$2 = dependency.target;
          if (id$2.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeSpecialAbilityDependency(dependency, param, param$1);
                        }), hero, id$2._0);
          } else {
            return removeSpecialAbilityDependency(dependency, hero, id$2._0);
          }
      
    }
  } else {
    switch (category) {
      case /* Advantages */0 :
          var id$3 = dependency.target;
          if (id$3.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addAdvantageDependency(dependency, param, param$1);
                        }), hero, id$3._0);
          } else {
            return addAdvantageDependency(dependency, hero, id$3._0);
          }
      case /* Disadvantages */1 :
          var id$4 = dependency.target;
          if (id$4.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addDisadvantageDependency(dependency, param, param$1);
                        }), hero, id$4._0);
          } else {
            return addDisadvantageDependency(dependency, hero, id$4._0);
          }
      case /* SpecialAbilities */2 :
          var id$5 = dependency.target;
          if (id$5.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addSpecialAbilityDependency(dependency, param, param$1);
                        }), hero, id$5._0);
          } else {
            return addSpecialAbilityDependency(dependency, hero, id$5._0);
          }
      
    }
  }
}

function putIncreasableDependency(mode, category, dependency, hero) {
  if (mode) {
    switch (category) {
      case /* Attributes */0 :
          return removeAttributeDependency$1(dependency, hero);
      case /* Skills */1 :
          var id = dependency.target;
          if (id.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeSkillDependency(dependency, param, param$1);
                        }), hero, id._0);
          } else {
            return removeSkillDependency(dependency, hero, id._0);
          }
      case /* CombatTechniques */2 :
          var id$1 = dependency.target;
          if (id$1.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeCombatTechniqueDependency(dependency, param, param$1);
                        }), hero, id$1._0);
          } else {
            return removeCombatTechniqueDependency(dependency, hero, id$1._0);
          }
      case /* Spells */3 :
          var id$2 = dependency.target;
          if (id$2.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeSpellDependency(dependency, param, param$1);
                        }), hero, id$2._0);
          } else {
            return removeSpellDependency(dependency, hero, id$2._0);
          }
      case /* LiturgicalChants */4 :
          var id$3 = dependency.target;
          if (id$3.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return removeLiturgicalChantDependency(dependency, param, param$1);
                        }), hero, id$3._0);
          } else {
            return removeLiturgicalChantDependency(dependency, hero, id$3._0);
          }
      
    }
  } else {
    switch (category) {
      case /* Attributes */0 :
          return addAttributeDependency$1(dependency, hero);
      case /* Skills */1 :
          var id$4 = dependency.target;
          if (id$4.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addSkillDependency(dependency, param, param$1);
                        }), hero, id$4._0);
          } else {
            return addSkillDependency(dependency, hero, id$4._0);
          }
      case /* CombatTechniques */2 :
          var id$5 = dependency.target;
          if (id$5.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addCombatTechniqueDependency(dependency, param, param$1);
                        }), hero, id$5._0);
          } else {
            return addCombatTechniqueDependency(dependency, hero, id$5._0);
          }
      case /* Spells */3 :
          var id$6 = dependency.target;
          if (id$6.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addSpellDependency(dependency, param, param$1);
                        }), hero, id$6._0);
          } else {
            return addSpellDependency(dependency, hero, id$6._0);
          }
      case /* LiturgicalChants */4 :
          var id$7 = dependency.target;
          if (id$7.TAG) {
            return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                          return addLiturgicalChantDependency(dependency, param, param$1);
                        }), hero, id$7._0);
          } else {
            return addLiturgicalChantDependency(dependency, hero, id$7._0);
          }
      
    }
  }
}

function modifyDependencies(mode, staticData, prerequisites, sourceId, hero) {
  return Ley_List$OptolithClient.Foldable.foldr((function (prerequisite) {
                if (typeof prerequisite === "number") {
                  return Ley_Function$OptolithClient.id;
                }
                switch (prerequisite.TAG | 0) {
                  case /* PrimaryAttribute */5 :
                      var options = prerequisite._0;
                      if (typeof sourceId === "number") {
                        return Ley_Function$OptolithClient.id;
                      }
                      var variant = sourceId.HASH;
                      if (variant >= -41058677) {
                        if (variant !== 255955901 && variant !== 345443720 && variant >= -41058676) {
                          return Ley_Function$OptolithClient.id;
                        }
                        
                      } else if (variant !== -789492591 && variant !== -384382742) {
                        return Ley_Function$OptolithClient.id;
                      }
                      return function (param) {
                        var match = options.scope;
                        return Ley_Option$OptolithClient.option(param, (function (attrId) {
                                      var dependency_target = {
                                        TAG: /* One */0,
                                        _0: attrId
                                      };
                                      var dependency_value = options.value;
                                      var dependency = {
                                        source: sourceId,
                                        target: dependency_target,
                                        value: dependency_value
                                      };
                                      if (mode) {
                                        return removeAttributeDependency$1(dependency, param);
                                      } else {
                                        return addAttributeDependency$1(dependency, param);
                                      }
                                    }), match ? Tradition$OptolithClient.Blessed.getPrimaryAttributeId(staticData, param.specialAbilities) : Tradition$OptolithClient.Magical.getPrimaryAttributeId(staticData, param.specialAbilities));
                      };
                      break;
                  case /* Activatable */6 :
                      var options$1 = prerequisite._0;
                      if (typeof sourceId === "number") {
                        return Ley_Function$OptolithClient.id;
                      }
                      var variant$1 = sourceId.HASH;
                      if (variant$1 !== -789492591 && variant$1 !== -41058677 && variant$1 !== 255955901) {
                        return Ley_Function$OptolithClient.id;
                      }
                      return function (param) {
                        var match = options$1.id;
                        var variant = match.HASH;
                        var match$1 = options$1.id;
                        var sid = options$1.sid;
                        var tmp;
                        if (sid !== undefined) {
                          var sid2 = options$1.sid2;
                          tmp = sid2 !== undefined ? ({
                                hd: {
                                  TAG: /* One */0,
                                  _0: sid
                                },
                                tl: {
                                  hd: {
                                    TAG: /* One */0,
                                    _0: sid2
                                  },
                                  tl: /* [] */0
                                }
                              }) : ({
                                hd: {
                                  TAG: /* One */0,
                                  _0: sid
                                },
                                tl: /* [] */0
                              });
                        } else {
                          tmp = /* [] */0;
                        }
                        return putActivatableDependency(mode, variant !== -41058677 ? (
                                      variant >= 255955901 ? /* Disadvantages */1 : /* SpecialAbilities */2
                                    ) : /* Advantages */0, {
                                    source: sourceId,
                                    target: {
                                      TAG: /* One */0,
                                      _0: match$1.VAL
                                    },
                                    active: options$1.active,
                                    options: tmp,
                                    level: options$1.level
                                  }, param);
                      };
                      break;
                  case /* ActivatableMultiEntry */7 :
                      var options$2 = prerequisite._0;
                      if (typeof sourceId === "number") {
                        return Ley_Function$OptolithClient.id;
                      }
                      var variant$2 = sourceId.HASH;
                      if (variant$2 !== -789492591 && variant$2 !== -41058677 && variant$2 !== 255955901) {
                        return Ley_Function$OptolithClient.id;
                      }
                      return function (param) {
                        var match = options$2.id;
                        var tmp;
                        switch (match.TAG | 0) {
                          case /* Advantages */0 :
                              tmp = /* Advantages */0;
                              break;
                          case /* Disadvantages */1 :
                              tmp = /* Disadvantages */1;
                              break;
                          case /* SpecialAbilities */2 :
                              tmp = /* SpecialAbilities */2;
                              break;
                          
                        }
                        var match$1 = options$2.id;
                        var sid = options$2.sid;
                        var tmp$1;
                        if (sid !== undefined) {
                          var sid2 = options$2.sid2;
                          tmp$1 = sid2 !== undefined ? ({
                                hd: {
                                  TAG: /* One */0,
                                  _0: sid
                                },
                                tl: {
                                  hd: {
                                    TAG: /* One */0,
                                    _0: sid2
                                  },
                                  tl: /* [] */0
                                }
                              }) : ({
                                hd: {
                                  TAG: /* One */0,
                                  _0: sid
                                },
                                tl: /* [] */0
                              });
                        } else {
                          tmp$1 = /* [] */0;
                        }
                        return putActivatableDependency(mode, tmp, {
                                    source: sourceId,
                                    target: {
                                      TAG: /* Many */1,
                                      _0: match$1._0
                                    },
                                    active: options$2.active,
                                    options: tmp$1,
                                    level: options$2.level
                                  }, param);
                      };
                      break;
                  case /* ActivatableMultiSelect */8 :
                      var options$3 = prerequisite._0;
                      if (typeof sourceId === "number") {
                        return Ley_Function$OptolithClient.id;
                      }
                      var variant$3 = sourceId.HASH;
                      if (variant$3 !== -789492591 && variant$3 !== -41058677 && variant$3 !== 255955901) {
                        return Ley_Function$OptolithClient.id;
                      }
                      return function (param) {
                        var match = options$3.id;
                        var variant = match.HASH;
                        var match$1 = options$3.id;
                        var sid2 = options$3.sid2;
                        return putActivatableDependency(mode, variant !== -41058677 ? (
                                      variant >= 255955901 ? /* Disadvantages */1 : /* SpecialAbilities */2
                                    ) : /* Advantages */0, {
                                    source: sourceId,
                                    target: {
                                      TAG: /* One */0,
                                      _0: match$1.VAL
                                    },
                                    active: options$3.active,
                                    options: sid2 !== undefined ? ({
                                          hd: {
                                            TAG: /* Many */1,
                                            _0: options$3.sid
                                          },
                                          tl: {
                                            hd: {
                                              TAG: /* One */0,
                                              _0: sid2
                                            },
                                            tl: /* [] */0
                                          }
                                        }) : ({
                                          hd: {
                                            TAG: /* Many */1,
                                            _0: options$3.sid
                                          },
                                          tl: /* [] */0
                                        }),
                                    level: options$3.level
                                  }, param);
                      };
                      break;
                  case /* Increasable */9 :
                      var options$4 = prerequisite._0;
                      if (typeof sourceId === "number") {
                        return Ley_Function$OptolithClient.id;
                      }
                      var variant$4 = sourceId.HASH;
                      if (variant$4 >= -41058677) {
                        if (variant$4 !== 255955901 && variant$4 !== 345443720 && variant$4 >= -41058676) {
                          return Ley_Function$OptolithClient.id;
                        }
                        
                      } else if (variant$4 !== -789492591 && variant$4 !== -384382742) {
                        return Ley_Function$OptolithClient.id;
                      }
                      return function (param) {
                        var match = options$4.id;
                        var variant = match.HASH;
                        var match$1 = options$4.id;
                        return putIncreasableDependency(mode, variant !== -384382742 ? (
                                      variant >= 345443720 ? (
                                          variant >= 482562044 ? /* Attributes */0 : /* Spells */3
                                        ) : (
                                          variant >= 290194801 ? /* Skills */1 : /* CombatTechniques */2
                                        )
                                    ) : /* LiturgicalChants */4, {
                                    source: sourceId,
                                    target: {
                                      TAG: /* One */0,
                                      _0: match$1.VAL
                                    },
                                    value: options$4.value
                                  }, param);
                      };
                      break;
                  case /* IncreasableMultiEntry */10 :
                      var options$5 = prerequisite._0;
                      if (typeof sourceId === "number") {
                        return Ley_Function$OptolithClient.id;
                      }
                      var variant$5 = sourceId.HASH;
                      if (variant$5 >= -41058677) {
                        if (variant$5 !== 255955901 && variant$5 !== 345443720 && variant$5 >= -41058676) {
                          return Ley_Function$OptolithClient.id;
                        }
                        
                      } else if (variant$5 !== -789492591 && variant$5 !== -384382742) {
                        return Ley_Function$OptolithClient.id;
                      }
                      return function (param) {
                        var match = options$5.id;
                        var tmp;
                        switch (match.TAG | 0) {
                          case /* Attributes */0 :
                              tmp = /* Attributes */0;
                              break;
                          case /* Skills */1 :
                              tmp = /* Skills */1;
                              break;
                          case /* CombatTechniques */2 :
                              tmp = /* CombatTechniques */2;
                              break;
                          case /* Spells */3 :
                              tmp = /* Spells */3;
                              break;
                          case /* LiturgicalChants */4 :
                              tmp = /* LiturgicalChants */4;
                              break;
                          
                        }
                        var match$1 = options$5.id;
                        return putIncreasableDependency(mode, tmp, {
                                    source: sourceId,
                                    target: {
                                      TAG: /* Many */1,
                                      _0: match$1._0
                                    },
                                    value: options$5.value
                                  }, param);
                      };
                      break;
                  default:
                    return Ley_Function$OptolithClient.id;
                }
              }), hero, prerequisites);
}

function addDependencies(param, param$1, param$2, param$3) {
  return modifyDependencies(/* Add */0, param, param$1, param$2, param$3);
}

function removeDependencies(param, param$1, param$2, param$3) {
  return modifyDependencies(/* Remove */1, param, param$1, param$2, param$3);
}

var TransferredUnfamiliar = {
  isUnfamiliarSpell: isUnfamiliarSpell,
  addTransferUnfamiliarDependencies: addTransferUnfamiliarDependencies,
  isEntryAllowingTransferUnfamiliarRemovable: isEntryAllowingTransferUnfamiliarRemovable
};

export {
  Flatten ,
  TransferredUnfamiliar ,
  addDependencies ,
  removeDependencies ,
  
}
/* Tradition-OptolithClient Not a pure module */
