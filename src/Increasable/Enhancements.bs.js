// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as PublicationRef$OptolithClient from "../Sources/PublicationRef.bs.js";
import * as TranslationMap$OptolithClient from "../Misc/TranslationMap.bs.js";

function decode(json) {
  return {
          name: JsonStrict$OptolithClient.field("name", JsonStrict$OptolithClient.string, json),
          effect: JsonStrict$OptolithClient.field("effect", JsonStrict$OptolithClient.string, json)
        };
}

var LevelTranslations = {
  decode: decode
};

var LevelTranslationMap = TranslationMap$OptolithClient.Make(LevelTranslations);

function decodeMultilingual(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          translations: JsonStrict$OptolithClient.field("translations", LevelTranslationMap.decode, json)
        };
}

function resolveTranslations(langs, x) {
  return Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(LevelTranslationMap.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        effect: translation.effect
                      };
              }));
}

function decodePrerequisite(json) {
  var x = JsonStrict$OptolithClient.$$int(json);
  if (x === 1) {
    return 1;
  }
  throw {
        RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
        _1: "Unknown level 2 prerequisite: " + Ley_Int$OptolithClient.show(x),
        Error: new Error()
      };
}

function decodeMultilingual$1(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          requiresLevel1: Ley_Option$OptolithClient.isSome(JsonStrict$OptolithClient.optionalField("previousRequirement", decodePrerequisite, json)),
          translations: JsonStrict$OptolithClient.field("translations", LevelTranslationMap.decode, json)
        };
}

function resolveTranslations$1(langs, x) {
  return Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(LevelTranslationMap.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        effect: translation.effect,
                        requiresLevel1: x.requiresLevel1
                      };
              }));
}

function decodePrerequisite$1(json) {
  var x = JsonStrict$OptolithClient.$$int(json);
  if (x === 1) {
    return /* First */0;
  }
  if (x === 2) {
    return /* Second */1;
  }
  throw {
        RE_EXN_ID: JsonStrict$OptolithClient.DecodeError,
        _1: "Unknown level 3 prerequisite: " + Ley_Int$OptolithClient.show(x),
        Error: new Error()
      };
}

function decodeMultilingual$2(json) {
  return {
          id: JsonStrict$OptolithClient.field("id", JsonStrict$OptolithClient.$$int, json),
          requiresPrevious: JsonStrict$OptolithClient.optionalField("previousRequirement", decodePrerequisite$1, json),
          translations: JsonStrict$OptolithClient.field("translations", LevelTranslationMap.decode, json)
        };
}

function resolveTranslations$2(langs, x) {
  return Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(LevelTranslationMap.getFromLanguageOrder, langs, x.translations), (function (translation) {
                return {
                        id: x.id,
                        name: translation.name,
                        effect: translation.effect,
                        requiresPrevious: x.requiresPrevious
                      };
              }));
}

function decode$1(json) {
  return {
          errata: JsonStrict$OptolithClient.field("errata", Erratum$OptolithClient.decodeList, json)
        };
}

var Translations = {
  decode: decode$1
};

var TranslationMap = TranslationMap$OptolithClient.Make(Translations);

function decodeMultilingual$3(json) {
  return {
          levels: JsonStrict$OptolithClient.field("levels", (function (param) {
                  return JsonStrict$OptolithClient.tuple3(decodeMultilingual, decodeMultilingual$1, decodeMultilingual$2, param);
                }), json),
          src: JsonStrict$OptolithClient.field("src", PublicationRef$OptolithClient.decodeMultilingualList, json),
          translations: JsonStrict$OptolithClient.field("translations", TranslationMap.decode, json)
        };
}

function resolveTranslations$3(langs, x) {
  return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(TranslationMap.getFromLanguageOrder, langs, x.translations), (function (translation) {
                var match = x.levels;
                return Ley_Option$OptolithClient.Monad.liftM3((function (level1, level2, level3) {
                              return {
                                      levels: [
                                        level1,
                                        level2,
                                        level3
                                      ],
                                      src: PublicationRef$OptolithClient.resolveTranslationsList(langs, x.src),
                                      errata: translation.errata
                                    };
                            }), resolveTranslations(langs, match[0]), resolveTranslations$1(langs, match[1]), resolveTranslations$2(langs, match[2]));
              }));
}

var Level1 = {};

var Level2 = {};

var Level3 = {};

export {
  Level1 ,
  Level2 ,
  Level3 ,
  decodeMultilingual$3 as decodeMultilingual,
  resolveTranslations$3 as resolveTranslations,
  
}
/* LevelTranslationMap Not a pure module */
