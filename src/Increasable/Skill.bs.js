// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as IC$OptolithClient from "./IC.bs.js";
import * as Erratum$OptolithClient from "../Sources/Erratum.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Yaml_Zip$OptolithClient from "../Misc/Yaml_Zip.bs.js";
import * as SourceRef$OptolithClient from "../Sources/SourceRef.bs.js";
import * as JsonStrict$OptolithClient from "../Misc/JsonStrict.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Prerequisite$OptolithClient from "../Prerequisites/Prerequisite.bs.js";

function applicationL10n(json) {
  return [
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("name", Json_decode.string, json)
        ];
}

function useL10n(json) {
  return [
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("name", Json_decode.string, json)
        ];
}

function tL10n(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          name: Json_decode.field("name", Json_decode.string, json),
          applications: Json_decode.field("applications", (function (param) {
                  return Json_decode.list(applicationL10n, param);
                }), json),
          applicationsInput: JsonStrict$OptolithClient.optionalField("applicationsInput", Json_decode.string, json),
          uses: JsonStrict$OptolithClient.optionalField("uses", (function (param) {
                  return Json_decode.list(useL10n, param);
                }), json),
          encDescription: JsonStrict$OptolithClient.optionalField("encDescription", Json_decode.string, json),
          tools: JsonStrict$OptolithClient.optionalField("tools", Json_decode.string, json),
          quality: Json_decode.field("quality", Json_decode.string, json),
          failed: Json_decode.field("failed", Json_decode.string, json),
          critical: Json_decode.field("critical", Json_decode.string, json),
          botch: Json_decode.field("botch", Json_decode.string, json),
          src: Json_decode.field("src", SourceRef$OptolithClient.Decode.list, json),
          errata: Json_decode.field("errata", Erratum$OptolithClient.Decode.list, json)
        };
}

function applicationUniv(json) {
  return [
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("prerequisite", Prerequisite$OptolithClient.Decode.activatable, json)
        ];
}

function useUniv(json) {
  return [
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("prerequisite", Prerequisite$OptolithClient.Decode.activatable, json)
        ];
}

function encumbranceUniv(json) {
  var str = Json_decode.string(json);
  switch (str) {
    case "false" :
        Json_decode.$$int(json);
        return /* False */1;
    case "maybe" :
        Json_decode.$$int(json);
        return /* Maybe */2;
    case "true" :
        Json_decode.$$int(json);
        return /* True */0;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown encumbrance: " + str,
            Error: new Error()
          };
  }
}

function tUniv(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          applications: JsonStrict$OptolithClient.optionalField("applications", (function (param) {
                  return Json_decode.list(applicationUniv, param);
                }), json),
          uses: JsonStrict$OptolithClient.optionalField("uses", (function (param) {
                  return Json_decode.list(useUniv, param);
                }), json),
          check1: Json_decode.field("check1", Json_decode.$$int, json),
          check2: Json_decode.field("check2", Json_decode.$$int, json),
          check3: Json_decode.field("check3", Json_decode.$$int, json),
          ic: Json_decode.field("ic", IC$OptolithClient.Decode.t, json),
          enc: Json_decode.field("enc", encumbranceUniv, json),
          gr: Json_decode.field("gr", Json_decode.$$int, json)
        };
}

function newApplication(univ, l10n) {
  return [
          univ[0],
          {
            id: univ[0],
            name: l10n[1],
            prerequisite: univ[1]
          }
        ];
}

function application(l10n) {
  return [
          l10n[0],
          {
            id: l10n[0],
            name: l10n[1],
            prerequisite: undefined
          }
        ];
}

function use(univ, l10n) {
  return [
          univ[0],
          {
            id: univ[0],
            name: l10n[1],
            prerequisite: univ[1]
          }
        ];
}

function t(univ, l10n) {
  var match = univ.enc;
  var tmp;
  switch (match) {
    case /* True */0 :
        tmp = /* True */0;
        break;
    case /* False */1 :
        tmp = /* False */1;
        break;
    case /* Maybe */2 :
        tmp = /* Maybe */{
          _0: l10n.encDescription
        };
        break;
    
  }
  var param = Yaml_Zip$OptolithClient.zipByPartition(Ley_Int$OptolithClient.show, newApplication, application, (function (prim) {
          return prim[0];
        }), (function (prim) {
          return prim[0];
        }), Ley_Option$OptolithClient.fromOption(/* [] */0, univ.applications), l10n.applications);
  return [
          univ.id,
          {
            id: univ.id,
            name: l10n.name,
            check: [
              univ.check1,
              univ.check2,
              univ.check3
            ],
            encumbrance: tmp,
            gr: univ.gr,
            ic: univ.ic,
            applications: Curry._1(Ley_IntMap$OptolithClient.fromList, Pervasives.$at(param[1], param[0])),
            applicationsInput: l10n.applicationsInput,
            uses: Curry._1(Ley_IntMap$OptolithClient.fromList, Yaml_Zip$OptolithClient.zipBy(Ley_Int$OptolithClient.show, use, (function (prim) {
                        return prim[0];
                      }), (function (prim) {
                        return prim[0];
                      }), Ley_Option$OptolithClient.fromOption(/* [] */0, univ.uses), Ley_Option$OptolithClient.fromOption(/* [] */0, l10n.uses))),
            tools: l10n.tools,
            quality: l10n.quality,
            failed: l10n.failed,
            critical: l10n.critical,
            botch: l10n.botch,
            src: l10n.src,
            errata: l10n.errata
          }
        ];
}

function all(yamlData) {
  return Curry._1(Ley_IntMap$OptolithClient.fromList, Yaml_Zip$OptolithClient.zipBy(Ley_Int$OptolithClient.show, t, (function (x) {
                    return x.id;
                  }), (function (x) {
                    return x.id;
                  }), Json_decode.list(tUniv, yamlData.skillsUniv), Json_decode.list(tL10n, yamlData.skillsL10n)));
}

function group(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          name: Json_decode.field("name", Json_decode.string, json),
          fullName: Json_decode.field("fullName", Json_decode.string, json)
        };
}

function groups(yamlData) {
  return Curry._1(Ley_IntMap$OptolithClient.fromList, Ley_List$OptolithClient.map((function (x) {
                    return [
                            x.id,
                            x
                          ];
                  }), Json_decode.list(group, yamlData.skillGroupsL10n)));
}

var Decode = {
  applicationL10n: applicationL10n,
  useL10n: useL10n,
  tL10n: tL10n,
  applicationUniv: applicationUniv,
  useUniv: useUniv,
  encumbranceUniv: encumbranceUniv,
  tUniv: tUniv,
  newApplication: newApplication,
  application: application,
  use: use,
  t: t,
  all: all,
  group: group,
  groups: groups
};

export {
  Decode ,
  
}
/* Ley_IntMap-OptolithClient Not a pure module */
