// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";

function Dynamic(Type) {
  var minValue = Type.minValue;
  var empty = function (id) {
    return {
            id: id,
            value: minValue,
            dependencies: /* [] */0
          };
  };
  var isEmpty = function (x) {
    if (x.value <= minValue) {
      return Ley_List$OptolithClient.Foldable.$$null(x.dependencies);
    } else {
      return false;
    }
  };
  var getValueDef = function (param) {
    return Ley_Option$OptolithClient.option(minValue, (function (x) {
                  return x.value;
                }), param);
  };
  return {
          minValue: minValue,
          empty: empty,
          isEmpty: isEmpty,
          getValueDef: getValueDef
        };
}

function empty(id) {
  return {
          id: id,
          value: /* Inactive */0,
          dependencies: /* [] */0
        };
}

function isEmpty(x) {
  if (x.value === /* Inactive */0) {
    return Ley_List$OptolithClient.Foldable.$$null(x.dependencies);
  } else {
    return false;
  }
}

function getValueDef(param) {
  return Ley_Option$OptolithClient.option(/* Inactive */0, (function (x) {
                return x.value;
              }), param);
}

function valueToInt(value) {
  if (value) {
    return value._0;
  } else {
    return 0;
  }
}

function isActive(x) {
  var match = x.value;
  if (match) {
    return true;
  } else {
    return false;
  }
}

function isActiveM(param) {
  return Ley_Option$OptolithClient.option(false, isActive, param);
}

var DynamicActivatable = {
  empty: empty,
  isEmpty: isEmpty,
  getValueDef: getValueDef,
  valueToInt: valueToInt,
  isActive: isActive,
  isActiveM: isActiveM
};

export {
  Dynamic ,
  DynamicActivatable ,
  
}
/* No side effect */
