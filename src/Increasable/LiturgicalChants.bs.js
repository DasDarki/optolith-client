// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Skills$OptolithClient from "./Skills.bs.js";
import * as Ley_Int$OptolithClient from "../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../Data/Ley_Option.bs.js";
import * as Dependencies$OptolithClient from "../Prerequisites/Dependencies.bs.js";
import * as Ley_Function$OptolithClient from "../Data/Ley_Function.bs.js";
import * as Activatable_SelectOptions$OptolithClient from "../Activatable/Activatable_SelectOptions.bs.js";

function getValueDef(param) {
  return Ley_Option$OptolithClient.option(/* Inactive */0, (function (x) {
                return x.value;
              }), param);
}

function valueToInt(value) {
  if (value) {
    return value._0;
  } else {
    return 0;
  }
}

function isActive(param) {
  return Ley_Option$OptolithClient.option(false, (function (x) {
                var match = x.value;
                if (match) {
                  return true;
                } else {
                  return false;
                }
              }), param);
}

function getMaxSrFromAspectKnowledge(aspectKnowledge, staticEntry) {
  var hasRestriction = Ley_Option$OptolithClient.option(true, (function (actives) {
          return Ley_List$OptolithClient.Foldable.all((function (aspect) {
                        return Ley_List$OptolithClient.Foldable.notElem({
                                    HASH: /* Generic */61643255,
                                    VAL: aspect
                                  }, actives);
                      }), staticEntry.aspects);
        }), Ley_Option$OptolithClient.Functor.$less$amp$great(aspectKnowledge, Activatable_SelectOptions$OptolithClient.getActiveOptions1));
  if (hasRestriction) {
    return 14;
  }
  
}

function getMax(startEl, phase, heroAttrs, exceptionalSkill, aspectKnowledge, staticEntry) {
  return Skills$OptolithClient.getExceptionalSkillBonus(exceptionalSkill, {
              HASH: /* Spell */345443720,
              VAL: staticEntry.id
            }) + Ley_List$OptolithClient.Foldable.minimum(Ley_Option$OptolithClient.catOptions({
                  hd: Skills$OptolithClient.getMaxSrByCheckAttrs(heroAttrs, staticEntry.check),
                  tl: {
                    hd: Skills$OptolithClient.getMaxSrFromEl(startEl, phase),
                    tl: {
                      hd: getMaxSrFromAspectKnowledge(aspectKnowledge, staticEntry),
                      tl: /* [] */0
                    }
                  }
                })) | 0;
}

function isIncreasable(startEl, phase, heroAttrs, exceptionalSkill, aspectKnowledge, staticEntry, heroEntry) {
  return valueToInt(heroEntry.value) < getMax(startEl, phase, heroAttrs, exceptionalSkill, aspectKnowledge, staticEntry);
}

function isOnMinimum(spell) {
  var value = spell.value;
  if (value) {
    return value._0 >= 10;
  } else {
    return false;
  }
}

function addToCounter(chant, counter) {
  return Ley_List$OptolithClient.Foldable.foldr((function (aspect) {
                return Curry._3(Ley_IntMap$OptolithClient.insertWith, (function (prim, prim$1) {
                              return prim + prim$1 | 0;
                            }), aspect, 1);
              }), counter, chant.aspects);
}

function countApplicable(staticChants, heroChants) {
  return Curry._3(Ley_IntMap$OptolithClient.foldrWithKey, (function (chantId, chant) {
                if (isOnMinimum(chant)) {
                  return Ley_Option$OptolithClient.option(Ley_Function$OptolithClient.id, addToCounter, Curry._2(Ley_IntMap$OptolithClient.lookup, chantId, staticChants));
                } else {
                  return Ley_Function$OptolithClient.id;
                }
              }), Ley_IntMap$OptolithClient.empty, heroChants);
}

var counterToAvailable = Curry._2(Ley_IntMap$OptolithClient.foldrWithKey, (function (aspectId, count) {
        if (count >= 3) {
          return function (param) {
            return Ley_List$OptolithClient.cons(aspectId, param);
          };
        } else {
          return Ley_Function$OptolithClient.id;
        }
      }), /* [] */0);

function getAvailableAspects(staticChants, heroChants) {
  return Curry._1(counterToAvailable, countApplicable(staticChants, heroChants));
}

function getMinSr(counter, activeAspectKnowledges, staticEntry, heroEntry) {
  var hasActiveAspectKnowledge = Ley_List$OptolithClient.Foldable.any((function (sid) {
          if (typeof sid === "number" || sid.HASH !== 61643255) {
            return false;
          } else {
            return Ley_List$OptolithClient.Foldable.elem(sid.VAL, staticEntry.aspects);
          }
        }), activeAspectKnowledges);
  if (!hasActiveAspectKnowledge) {
    return ;
  }
  var isRequired = Ley_List$OptolithClient.Foldable.any((function (aspect) {
          return Ley_Option$OptolithClient.option(false, (function (count) {
                        if (valueToInt(heroEntry.value) >= 10) {
                          return count <= 3;
                        } else {
                          return false;
                        }
                      }), Curry._2(Ley_IntMap$OptolithClient.lookup, aspect, counter));
        }), staticEntry.aspects);
  if (isRequired) {
    return 10;
  }
  
}

function getMinSrByDeps(heroLiturgicalChants, heroEntry) {
  return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Dependencies$OptolithClient.Flatten.flattenActivatableSkillDependencies((function (id) {
                        return getValueDef(Curry._2(Ley_IntMap$OptolithClient.lookup, id, heroLiturgicalChants));
                      }), heroEntry.id, heroEntry.dependencies)), (function (param) {
                return Ley_List$OptolithClient.Foldable.foldr((function (d, acc) {
                              return Ley_Option$OptolithClient.option(d, (function (prev) {
                                            return Ley_Int$OptolithClient.max(prev, d);
                                          }), acc);
                            }), undefined, param);
              }));
}

function getMin(aspectKnowledge, staticLiturgicalChants, heroLiturgicalChants) {
  var counter = countApplicable(staticLiturgicalChants, heroLiturgicalChants);
  var activeAspectKnowledges = Activatable_SelectOptions$OptolithClient.getActiveOptions1(aspectKnowledge);
  return function (staticEntry, heroEntry) {
    return Ley_Option$OptolithClient.Functor.$less$amp$great(Ley_Option$OptolithClient.ensure(Ley_List$OptolithClient.Extra.notNull, Ley_Option$OptolithClient.catOptions({
                        hd: getMinSrByDeps(heroLiturgicalChants, heroEntry),
                        tl: {
                          hd: getMinSr(counter, activeAspectKnowledges, staticEntry, heroEntry),
                          tl: /* [] */0
                        }
                      })), Ley_List$OptolithClient.Foldable.maximum);
  };
}

function isDecreasable(aspectKnowledge, staticLiturgicalChants, heroLiturgicalChants) {
  var getMinCached = getMin(aspectKnowledge, staticLiturgicalChants, heroLiturgicalChants);
  return function (staticEntry, heroEntry) {
    return valueToInt(heroEntry.value) > Ley_Option$OptolithClient.fromOption(0, Curry._2(getMinCached, staticEntry, heroEntry));
  };
}

var AspectKnowledge = {
  getAvailableAspects: getAvailableAspects
};

export {
  getValueDef ,
  valueToInt ,
  isActive ,
  getMax ,
  isIncreasable ,
  getMin ,
  isDecreasable ,
  AspectKnowledge ,
  
}
/* counterToAvailable Not a pure module */
