// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Label$OptolithClient from "./Label.bs.js";
import * as Ley_Int$OptolithClient from "../../../Data/Ley_Int.bs.js";
import * as Ley_List$OptolithClient from "../../../Data/Ley_List.bs.js";
import * as ClassNames$OptolithClient from "../../Utilities/ClassNames.bs.js";
import * as Ley_Option$OptolithClient from "../../../Data/Ley_Option.bs.js";

function Dropdown(Props) {
  var name = Props.name;
  var label = Props.label;
  var options = Props.options;
  Props.onChange;
  var disabled = Props.disabled;
  var onChange = Props.onChange;
  var active = Props.active;
  var placeholder = Props.placeholder;
  var match = React.useState((function () {
          return false;
        }));
  var setIsOpen = match[1];
  var isOpen = match[0];
  var match$1 = React.useState((function () {
          return /* Bottom */1;
        }));
  var setPosition = match$1[1];
  var containerRef = React.useRef(null);
  React.useCallback((function (param) {
          var maybeRef = containerRef.current;
          if (!(maybeRef == null) && !isOpen) {
            var height = Ley_Int$OptolithClient.min(166, Caml_int32.imul(Ley_List$OptolithClient.Foldable.length(options), 33) + 1 | 0);
            var rect = maybeRef.getBoundingClientRect();
            Curry._1(setPosition, (function (param) {
                    if (window.innerHeight - 32.0 - rect.top < height) {
                      return /* Top */0;
                    } else {
                      return /* Bottom */1;
                    }
                  }));
          }
          return Curry._1(setIsOpen, (function (prim) {
                        return !prim;
                      }));
        }), /* tuple */[
        isOpen,
        options
      ]);
  React.useCallback((function (option) {
          Curry._1(setIsOpen, (function (param) {
                  return false;
                }));
          return Curry._1(onChange, option);
        }), /* tuple */[
        setIsOpen,
        onChange
      ]);
  React.useCallback((function (option) {
          Curry._1(setIsOpen, (function (param) {
                  return false;
                }));
          return Curry._1(onChange, option);
        }), /* tuple */[
        setIsOpen,
        onChange
      ]);
  var handleOutsideClick = React.useCallback((function ($$event) {
          if (isOpen) {
            Ley_Option$OptolithClient.Functor.$less$amp$great(Caml_option.nullable_to_opt(containerRef.current), (function (currentRef) {
                    if (!currentRef.contains($$event.target)) {
                      return Curry._1(setIsOpen, (function (param) {
                                    return false;
                                  }));
                    }
                    
                  }));
            return ;
          }
          
        }), [isOpen]);
  React.useEffect((function () {
          window.addEventListener("mousedown", handleOutsideClick);
          window.addEventListener("ontouchstart", handleOutsideClick);
          return (function (param) {
                    window.removeEventListener("mousedown", handleOutsideClick);
                    window.removeEventListener("ontouchstart", handleOutsideClick);
                    
                  });
        }), [handleOutsideClick]);
  var active$1 = Ley_List$OptolithClient.Foldable.find((function (option) {
          return Caml_obj.caml_equal(option.value, active);
        }), options);
  Ley_Option$OptolithClient.fromOption("", Ley_Option$OptolithClient.Alternative.$less$pipe$great(Ley_Option$OptolithClient.Functor.$less$amp$great(active$1, (function (x) {
                  return x.label;
                })), placeholder));
  return React.createElement("div", {
              className: ClassNames$OptolithClient.fold(/* :: */[
                    "dropdown",
                    /* :: */[
                      ClassNames$OptolithClient.cond("disabled", disabled),
                      /* [] */0
                    ]
                  ])
            }, React.createElement(Label$OptolithClient.make, {
                  name: name,
                  labelText: label
                }));
}

var make = Dropdown;

export {
  make ,
  
}
/* react Not a pure module */
