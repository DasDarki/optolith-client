// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Ley_IntMap$OptolithClient = require("../../Data/Ley_IntMap.bs.js");
var Ley_IntSet$OptolithClient = require("../../Data/Ley_IntSet.bs.js");

function uniquePairs(xs) {
  return List.fold_right((function (param, mp) {
                var k = param[0];
                if (Curry._2(Ley_IntMap$OptolithClient.member, k, mp)) {
                  throw [
                        Json_decode.DecodeError,
                        "toMapIntegrity: Key " + (k.toString() + "is set twice")
                      ];
                }
                return Curry._3(Ley_IntMap$OptolithClient.insert, k, param[1], mp);
              }), xs, Ley_IntMap$OptolithClient.empty);
}

function uniqueList(xs) {
  return List.fold_right((function (x, s) {
                if (Curry._2(Ley_IntSet$OptolithClient.member, x, s)) {
                  throw [
                        Json_decode.DecodeError,
                        "toMapIntegrity: Key " + (x.toString() + "is set twice")
                      ];
                }
                return Curry._2(Ley_IntSet$OptolithClient.insert, x, s);
              }), xs, Ley_IntSet$OptolithClient.empty);
}

var Entity = {
  uniquePairs: uniquePairs,
  uniqueList: uniqueList
};

exports.Entity = Entity;
/* Ley_IntMap-OptolithClient Not a pure module */
