// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as IC$OptolithClient from "./IC.bs.js";
import * as Id$OptolithClient from "../Constants/Id.bs.js";
import * as Ids$OptolithClient from "../Constants/Ids.bs.js";
import * as Intl$OptolithClient from "./Intl.bs.js";
import * as Chars$OptolithClient from "./Chars.bs.js";
import * as Ley_Int$OptolithClient from "../../Data/Ley_Int.bs.js";
import * as Integers$OptolithClient from "./Integers.bs.js";
import * as Ley_List$OptolithClient from "../../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../../Data/Ley_Option.bs.js";
import * as Ley_Function$OptolithClient from "../../Data/Ley_Function.bs.js";
import * as AdvancedFiltering$OptolithClient from "./AdvancedFiltering.bs.js";
import * as Static_SelectOption$OptolithClient from "../Models/Static_SelectOption.bs.js";

function isActive(x) {
  return Ley_List$OptolithClient.Extra.notNull(x.active);
}

function isActiveM(param) {
  return Ley_Option$OptolithClient.option(false, isActive, param);
}

function heroEntryToSingles(x) {
  return Ley_List$OptolithClient.map((function (s) {
                return {
                        id: x.id,
                        options: s.options,
                        level: s.level,
                        customCost: s.customCost
                      };
              }), x.active);
}

function singleToSingleWithId(x, s) {
  return {
          id: x.id,
          options: s.options,
          level: s.level,
          customCost: s.customCost
        };
}

function activatableOptionToSelectOptionId(id) {
  if (id[0] >= 931971705) {
    return ;
  } else {
    return id;
  }
}

var Convert = {
  heroEntryToSingles: heroEntryToSingles,
  singleToSingleWithId: singleToSingleWithId,
  activatableOptionToSelectOptionId: activatableOptionToSelectOptionId
};

function name(x) {
  return x[0].name;
}

function selectOptions(x) {
  switch (x.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return x[0].selectOptions;
    case /* SpecialAbility */2 :
        return x[0].selectOptions;
    
  }
}

function input(x) {
  switch (x.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return x[0].input;
    case /* SpecialAbility */2 :
        return x[0].input;
    
  }
}

function apValue(x) {
  switch (x.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return x[0].apValue;
    case /* SpecialAbility */2 :
        return x[0].apValue;
    
  }
}

var Accessors = {
  name: name,
  selectOptions: selectOptions,
  input: input,
  apValue: apValue
};

function getSelectOption(x, id) {
  var partial_arg = selectOptions(x);
  return Ley_Option$OptolithClient.Monad.$great$great$eq(activatableOptionToSelectOptionId(id), (function (param) {
                return Ley_Function$OptolithClient.flip(Static_SelectOption$OptolithClient.SelectOptionMap.lookup, partial_arg, param);
              }));
}

function getSelectOptionName(x, id) {
  return Ley_Option$OptolithClient.Functor.$less$amp$great(getSelectOption(x, id), (function (y) {
                return y.name;
              }));
}

function getSelectOptionCost(x, id) {
  return Ley_Option$OptolithClient.Monad.$great$great$eq(getSelectOption(x, id), (function (y) {
                return y.cost;
              }));
}

function getActiveSelections(x) {
  return Ley_Option$OptolithClient.mapOption((function (y) {
                return Ley_Option$OptolithClient.listToOption(y.options);
              }), x.active);
}

var SelectOptions = {
  getSelectOption: getSelectOption,
  getSelectOptionName: getSelectOptionName,
  getSelectOptionCost: getSelectOptionCost,
  getActiveSelections: getActiveSelections
};

function getOption(index, heroEntry) {
  return Ley_List$OptolithClient.Safe.atMay(heroEntry.options, index);
}

function getCustomInput(option) {
  if (option[0] >= 931971705) {
    return option[1];
  }
  
}

function getGenericId(option) {
  if (option[0] !== 61643255) {
    return ;
  } else {
    return option[1];
  }
}

function lookupMap(k, mp, f) {
  return Ley_Option$OptolithClient.Functor.$less$$great(f, Curry._2(Ley_IntMap$OptolithClient.lookup, k, mp));
}

function getSkillFromOption(staticData, option) {
  if (option[0] !== 290194801) {
    return ;
  } else {
    return Curry._2(Ley_IntMap$OptolithClient.lookup, option[1], staticData.skills);
  }
}

function getDefaultNameAddition(staticEntry, heroEntry) {
  var input$1 = input(staticEntry);
  var selectOptions$1 = selectOptions(staticEntry);
  var sid = Ley_Option$OptolithClient.listToOption(heroEntry.options);
  var sid2 = getOption(1, heroEntry);
  if (input$1 !== undefined) {
    if (sid !== undefined) {
      if (sid[0] >= 931971705) {
        if (sid2 !== undefined) {
          return ;
        } else {
          return sid[1];
        }
      } else if (sid2 !== undefined && !(typeof sid2 === "number" || sid2[0] !== 931971705 || Curry._1(Static_SelectOption$OptolithClient.SelectOptionMap.size, selectOptions$1) <= 0)) {
        return Ley_Option$OptolithClient.fromOption("", getSelectOptionName(staticEntry, sid)) + (": " + sid2[1]);
      } else {
        return ;
      }
    } else {
      return ;
    }
  }
  if (sid === undefined) {
    return ;
  }
  if (typeof sid === "number") {
    return ;
  }
  var variant = sid[0];
  if (variant >= 61643255) {
    if (variant >= 345443720) {
      if (variant !== 797131559 && variant >= 345443721) {
        return ;
      }
      
    } else if (variant !== 290194801 && variant >= 61643256) {
      return ;
    }
    
  } else if (variant !== -920806756 && variant !== -841776939 && variant !== -384382742) {
    return ;
  }
  if (sid2 !== undefined) {
    return ;
  } else {
    return getSelectOptionName(staticEntry, sid);
  }
}

function getEntrySpecificNameAddition(staticData, staticEntry, heroEntry) {
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
        var match = Ids$OptolithClient.AdvantageId.fromInt(staticEntry[0].id);
        var exit = 0;
        if (typeof match !== "number") {
          return getDefaultNameAddition(staticEntry, heroEntry);
        }
        if (match >= 22) {
          return getDefaultNameAddition(staticEntry, heroEntry);
        }
        switch (match) {
          case /* Aptitude */0 :
          case /* ExceptionalSkill */4 :
              exit = 1;
              break;
          case /* ExceptionalCombatTechnique */5 :
          case /* WeaponAptitude */17 :
              exit = 2;
              break;
          case /* Nimble */1 :
          case /* Blessed */2 :
          case /* Luck */3 :
          case /* IncreasedAstralPower */6 :
          case /* IncreasedKarmaPoints */7 :
          case /* IncreasedLifePoints */8 :
          case /* IncreasedSpirit */9 :
          case /* IncreasedToughness */10 :
          case /* ImmunityToPoison */11 :
          case /* ImmunityToDisease */12 :
          case /* MagicalAttunement */13 :
          case /* Rich */14 :
          case /* SociallyAdaptable */15 :
          case /* InspireConfidence */16 :
          case /* Spellcaster */18 :
          case /* Unyielding */19 :
          case /* LargeSpellSelection */20 :
              return getDefaultNameAddition(staticEntry, heroEntry);
          case /* HatredFor */21 :
              return Ley_Option$OptolithClient.Monad.liftM2((function (type_, frequency) {
                            return type_ + (" (" + (frequency.name + ")"));
                          }), Ley_Option$OptolithClient.Monad.$great$great$eq(getOption(1, heroEntry), getCustomInput), Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                                return getSelectOption(staticEntry, param);
                              })));
          
        }
        switch (exit) {
          case 1 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (sid) {
                            var variant = sid[0];
                            if (variant !== -384382742) {
                              if (variant !== 290194801) {
                                if (variant !== 345443720) {
                                  return ;
                                } else {
                                  return lookupMap(sid[1], staticData.spells, (function (x) {
                                                return x.name;
                                              }));
                                }
                              } else {
                                return lookupMap(sid[1], staticData.skills, (function (x) {
                                              return x.name;
                                            }));
                              }
                            } else {
                              return lookupMap(sid[1], staticData.liturgicalChants, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          case 2 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (sid) {
                            if (sid[0] >= -841776939) {
                              return ;
                            } else {
                              return lookupMap(sid[1], staticData.combatTechniques, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          
        }
        break;
    case /* Disadvantage */1 :
        var match$1 = Ids$OptolithClient.DisadvantageId.fromInt(staticEntry[0].id);
        if (typeof match$1 === "number") {
          if (match$1 !== 12) {
            if (match$1 !== 18) {
              return getDefaultNameAddition(staticEntry, heroEntry);
            } else {
              return Ley_Option$OptolithClient.Functor.$less$amp$great(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                                return getSkillFromOption(staticData, param);
                              })), (function (x) {
                            return x.name;
                          }));
            }
          } else {
            return Ley_Option$OptolithClient.Functor.$less$amp$great(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                              return getSelectOption(staticEntry, param);
                            })), (function (option1) {
                          var match = option1.id;
                          return Ley_Option$OptolithClient.option(option1.name, (function (specialInput) {
                                        return option1.name + (": " + specialInput);
                                      }), match[0] !== 61643255 || (match[1] - 7 >>> 0) > 1 ? undefined : Ley_Option$OptolithClient.Monad.$great$great$eq(getOption(1, heroEntry), getCustomInput));
                        }));
          }
        } else {
          return getDefaultNameAddition(staticEntry, heroEntry);
        }
    case /* SpecialAbility */2 :
        var match$2 = Ids$OptolithClient.SpecialAbilityId.fromInt(staticEntry[0].id);
        var exit$1 = 0;
        if (typeof match$2 !== "number") {
          return getDefaultNameAddition(staticEntry, heroEntry);
        }
        var exit$2 = 0;
        if (match$2 >= 71) {
          if (match$2 !== 85) {
            if (match$2 >= 72) {
              return getDefaultNameAddition(staticEntry, heroEntry);
            } else {
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.join(Ley_Option$OptolithClient.Monad.liftM2(getSelectOption, Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(Ley_IntMap$OptolithClient.lookup, Ids$OptolithClient.SpecialAbilityId.toInt(/* Language */6), staticData.specialAbilities), (function (specialAbility) {
                                        return /* SpecialAbility */Block.__(2, [specialAbility]);
                                      })), Ley_Option$OptolithClient.listToOption(heroEntry.options))), (function (language) {
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(getOption(1, heroEntry), (function (option2) {
                                          var variant = option2[0];
                                          var tmp;
                                          if (variant !== 61643255) {
                                            tmp = variant >= 931971705 ? option2[1] : undefined;
                                          } else {
                                            var specializationId = option2[1];
                                            tmp = Ley_Option$OptolithClient.Monad.$great$great$eq(language.specializations, (function (specializations) {
                                                    return Ley_List$OptolithClient.Safe.atMay(specializations, specializationId - 1 | 0);
                                                  }));
                                          }
                                          return Ley_Option$OptolithClient.Functor.$less$amp$great(tmp, (function (specialization) {
                                                        return language.name + (": " + specialization);
                                                      }));
                                        }));
                          }));
            }
          } else {
            return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                              return getSkillFromOption(staticData, param);
                            })), (function (skill) {
                          var applications = Curry._2(Ley_IntMap$OptolithClient.filter, (function (app) {
                                  return Ley_Option$OptolithClient.isNone(app.prerequisite);
                                }), skill.applications);
                          return Ley_Option$OptolithClient.Functor.$less$amp$great(Ley_Option$OptolithClient.ensure((function (apps) {
                                            return 2 === Ley_List$OptolithClient.Foldable.length(apps);
                                          }), Ley_Option$OptolithClient.mapOption((function (option) {
                                                return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(option, getGenericId), (function (opt) {
                                                              return Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(Ley_IntMap$OptolithClient.Foldable.find, (function (app) {
                                                                                return app.id === opt;
                                                                              }), applications), (function (app) {
                                                                            return app.name;
                                                                          }));
                                                            }));
                                              }), /* :: */[
                                              getOption(1, heroEntry),
                                              /* :: */[
                                                getOption(2, heroEntry),
                                                /* [] */0
                                              ]
                                            ])), (function (apps) {
                                        var appsStr = Intl$OptolithClient.ListFormat.format(/* Conjunction */0, staticData, AdvancedFiltering$OptolithClient.sortStrings(staticData, apps));
                                        return skill.name + (": " + appsStr);
                                      }));
                        }));
          }
        }
        if (match$2 < 16) {
          if (match$2 !== 0) {
            return getDefaultNameAddition(staticEntry, heroEntry);
          } else {
            return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                              return getSkillFromOption(staticData, param);
                            })), (function (skill) {
                          return Ley_Option$OptolithClient.Monad.$great$great$eq(getOption(1, heroEntry), (function (option2) {
                                        var variant = option2[0];
                                        var tmp;
                                        if (variant !== 61643255) {
                                          tmp = variant >= 931971705 ? option2[1] : undefined;
                                        } else {
                                          var id = option2[1];
                                          tmp = Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(Ley_IntMap$OptolithClient.Foldable.find, (function (a) {
                                                      return a.id === id;
                                                    }), skill.applications), (function (a) {
                                                  return a.name;
                                                }));
                                        }
                                        return Ley_Option$OptolithClient.Functor.$less$amp$great(tmp, (function (appName) {
                                                      return skill.name + (": " + appName);
                                                    }));
                                      }));
                        }));
          }
        }
        if (match$2 >= 53) {
          return getDefaultNameAddition(staticEntry, heroEntry);
        }
        switch (match$2 - 16 | 0) {
          case /* TerrainKnowledge */1 :
              var match$3 = heroEntry.level;
              if (match$3 === 1) {
                return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                              return getSelectOptionName(staticEntry, param);
                            }));
              } else {
                return ;
              }
          case /* SkillSpecialization */0 :
          case /* CraftInstruments */2 :
              exit$1 = 1;
              break;
          case /* SpellEnhancement */25 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (sid) {
                            if (sid[0] !== -384382742) {
                              return ;
                            } else {
                              return lookupMap(sid[1], staticData.liturgicalChants, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          case /* TraditionGuildMages */9 :
          case /* PredigtDerGemeinschaft */30 :
              exit$2 = 3;
              break;
          case /* PredigtDesWohlgefallens */33 :
              var partial_arg = staticData.arcaneBardTraditions;
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), getGenericId), (function (param) {
                            return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg, param);
                          }));
          case /* PredigtWiderMissgeschicke */34 :
              var partial_arg$1 = staticData.arcaneDancerTraditions;
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), getGenericId), (function (param) {
                            return Ley_Function$OptolithClient.flip(Ley_IntMap$OptolithClient.lookup, partial_arg$1, param);
                          }));
          case /* Hunter */3 :
          case /* AreaKnowledge */4 :
          case /* Literacy */5 :
          case /* Language */6 :
          case /* CombatReflexes */7 :
          case /* ImprovedDodge */8 :
          case /* Feuerschlucker */14 :
          case /* CombatStyleCombination */15 :
          case /* AdaptionZauber */16 :
          case /* Exorzist */17 :
          case /* FavoriteSpellwork */18 :
          case /* TraditionWitches */19 :
          case /* MagicStyleCombination */20 :
          case /* Harmoniezauberei */21 :
          case /* Matrixzauberei */22 :
          case /* TraditionElves */23 :
          case /* TraditionDruids */24 :
          case /* Forschungsgebiet */26 :
          case /* Expertenwissen */27 :
          case /* Wissensdurst */28 :
          case /* Recherchegespuer */29 :
          case /* PredigtDerZuversicht */31 :
          case /* PredigtDesGottvertrauens */32 :
          case /* VisionDerBestimmung */35 :
              return getDefaultNameAddition(staticEntry, heroEntry);
          case /* PropertyKnowledge */10 :
          case /* PropertyFocus */11 :
          case /* AspectKnowledge */12 :
          case /* TraditionChurchOfPraios */13 :
          case /* VisionDerEntrueckung */36 :
              exit$1 = 2;
              break;
          
        }
        if (exit$2 === 3) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                            return getSelectOption(staticEntry, param);
                          })), (function (enhancement) {
                        return Ley_Option$OptolithClient.Monad.$great$great$eq(enhancement.target, (function (id) {
                                      var tmp;
                                      var exit = 0;
                                      if (typeof match$2 === "number" && match$2 === 25) {
                                        tmp = Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(Ley_IntMap$OptolithClient.lookup, id, staticData.spells), (function (x) {
                                                return x.name;
                                              }));
                                      } else {
                                        exit = 1;
                                      }
                                      if (exit === 1) {
                                        tmp = Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(Ley_IntMap$OptolithClient.lookup, id, staticData.liturgicalChants), (function (x) {
                                                return x.name;
                                              }));
                                      }
                                      return Ley_Option$OptolithClient.Functor.$less$amp$great(tmp, (function (targetName) {
                                                    return targetName + (": " + enhancement.name);
                                                  }));
                                    }));
                      }));
        }
        switch (exit$1) {
          case 1 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (sid) {
                            if (sid[0] !== 345443720) {
                              return ;
                            } else {
                              return lookupMap(sid[1], staticData.spells, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          case 2 :
              return Ley_Option$OptolithClient.Functor.$less$amp$great(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(heroEntry.options), (function (param) {
                                return getSkillFromOption(staticData, param);
                              })), (function (x) {
                            return x.name;
                          }));
          
        }
        break;
    
  }
}

function getDisAdvLevelStr(level) {
  return Ley_Option$OptolithClient.fromOption(Ley_Int$OptolithClient.show(level), Integers$OptolithClient.intToRoman(level));
}

function getSpecialAbilityLevelStr(level) {
  return (
          level > 1 ? "I" + (Chars$OptolithClient.nobr + ("\xe2\x80\x93" + Chars$OptolithClient.nobr)) : ""
        ) + getDisAdvLevelStr(level);
}

function getLevelName(staticData, staticEntry, singleHeroEntry) {
  var match = singleHeroEntry.level;
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        if (match !== undefined) {
          return getDisAdvLevelStr(match);
        } else {
          return ;
        }
    case /* SpecialAbility */2 :
        if (match === undefined) {
          return ;
        }
        var match$1 = Id$OptolithClient.specialAbilityFromInt(staticEntry[0].id);
        if (typeof match$1 === "number" && !(match$1 !== 6 || match !== 4)) {
          return staticData.messages.specialabilities_nativetonguelevel;
        } else {
          return getSpecialAbilityLevelStr(match);
        }
    
  }
}

function getEntrySpecificNameReplacements(addLevelToName, staticEntry, nameAddition, levelName) {
  var name = staticEntry[0].name;
  var flatLevelName = addLevelToName ? Ley_Option$OptolithClient.option("", (function (param) {
            return Chars$OptolithClient.nbsp + param;
          }), levelName) : "";
  var mapDefaultWithParens = function (param) {
    return Ley_Option$OptolithClient.option(name, (function (add) {
                  return name + (" (" + (add + ")"));
                }), nameAddition);
  };
  var mapDefaultWithoutParens = function (param) {
    return Ley_Option$OptolithClient.option(name, (function (add) {
                  return name + (" " + add);
                }), nameAddition);
  };
  var addSndInParens = function (snd) {
    var partial_arg = ": " + (snd + ")");
    return (function (param) {
        return Ley_List$OptolithClient.Extra.replaceStr(")", partial_arg, param);
      });
  };
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
        var match = Ids$OptolithClient.AdvantageId.fromInt(staticEntry[0].id);
        if (typeof match === "number") {
          if (match >= 13) {
            if (match !== 21) {
              return mapDefaultWithParens(undefined) + flatLevelName;
            } else {
              return mapDefaultWithoutParens(undefined);
            }
          } else if (match >= 11) {
            return mapDefaultWithoutParens(undefined);
          } else {
            return mapDefaultWithParens(undefined) + flatLevelName;
          }
        } else {
          return mapDefaultWithParens(undefined) + flatLevelName;
        }
    case /* Disadvantage */1 :
        var match$1 = Ids$OptolithClient.DisadvantageId.fromInt(staticEntry[0].id);
        if (typeof match$1 !== "number") {
          return mapDefaultWithParens(undefined) + flatLevelName;
        }
        var switcher = match$1 - 13 | 0;
        if (switcher > 6 || switcher < 0) {
          if (switcher >= -12) {
            return mapDefaultWithParens(undefined) + flatLevelName;
          } else {
            return mapDefaultWithoutParens(undefined) + flatLevelName;
          }
        } else if (switcher > 5 || switcher < 1) {
          return Ley_Option$OptolithClient.option(name + flatLevelName, (function (nameAddition) {
                        return name + (flatLevelName + (" (" + (nameAddition + ")")));
                      }), nameAddition);
        } else {
          return mapDefaultWithParens(undefined) + flatLevelName;
        }
    case /* SpecialAbility */2 :
        var match$2 = Ids$OptolithClient.SpecialAbilityId.fromInt(staticEntry[0].id);
        if (typeof match$2 !== "number") {
          return mapDefaultWithParens(undefined) + flatLevelName;
        }
        switch (match$2) {
          case /* GebieterDesAspekts */45 :
              return mapDefaultWithoutParens(undefined);
          case /* TraditionArcaneBard */49 :
              return Ley_Option$OptolithClient.option(name, (function (param) {
                            return Ley_Function$OptolithClient.flip(addSndInParens, name, param);
                          }), nameAddition);
          case /* TraditionArcaneDancer */50 :
              return Ley_Option$OptolithClient.option(name, (function (param) {
                            return Ley_Function$OptolithClient.flip(addSndInParens, name, param);
                          }), nameAddition);
          case /* ChantEnhancement */46 :
          case /* DunklesAbbildDerBuendnisgabe */47 :
          case /* TraditionIllusionist */48 :
          case /* TraditionIntuitiveMage */51 :
              return mapDefaultWithParens(undefined) + flatLevelName;
          case /* TraditionSavant */52 :
              return Ley_Option$OptolithClient.option(name, (function (param) {
                            return Ley_Function$OptolithClient.flip(addSndInParens, name, param);
                          }), nameAddition);
          default:
            return mapDefaultWithParens(undefined) + flatLevelName;
        }
    
  }
}

function getName(addLevelToName, staticData, staticEntry, heroEntry) {
  var addName = getEntrySpecificNameAddition(staticData, staticEntry, heroEntry);
  var levelName = getLevelName(staticData, staticEntry, heroEntry);
  var fullName = getEntrySpecificNameReplacements(addLevelToName, staticEntry, addName, levelName);
  return {
          name: fullName,
          baseName: staticEntry[0].name,
          addName: addName,
          levelName: levelName
        };
}

function ensureFlat(x) {
  if (x.tag) {
    return ;
  } else {
    return x[0];
  }
}

function ensurePerLevel(x) {
  if (x.tag) {
    return x[0];
  }
  
}

function getDefaultEntryCost(staticEntry, singleHeroEntry) {
  var sid1 = Ley_Option$OptolithClient.listToOption(singleHeroEntry.options);
  var level = Ley_Option$OptolithClient.fromOption(1, singleHeroEntry.level);
  var apValue$1 = Ley_Option$OptolithClient.fromOption(/* Flat */Block.__(0, [0]), apValue(staticEntry));
  var optionApValue = Ley_Option$OptolithClient.Monad.$great$great$eq(sid1, (function (param) {
          return getSelectOptionCost(staticEntry, param);
        }));
  if (optionApValue !== undefined) {
    return optionApValue;
  }
  if (!apValue$1.tag) {
    return Caml_int32.imul(apValue$1[0], level);
  }
  var xs = apValue$1[0];
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        return Ley_List$OptolithClient.Safe.atMay(xs, level - 1 | 0);
    case /* SpecialAbility */2 :
        return Ley_List$OptolithClient.Foldable.sum(Ley_List$OptolithClient.take(Ley_Int$OptolithClient.max(1, level), xs));
    
  }
}

function getEntrySpecificCost(isEntryToAdd, staticData, hero, staticEntry, heroEntry, singleHeroEntry) {
  var sid1 = Ley_Option$OptolithClient.listToOption(singleHeroEntry.options);
  var level = singleHeroEntry.level;
  var apValue$1 = Ley_Option$OptolithClient.fromOption(/* Flat */Block.__(0, [0]), apValue(staticEntry));
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
        var match = Ids$OptolithClient.AdvantageId.fromInt(staticEntry[0].id);
        var exit = 0;
        if (typeof match !== "number") {
          return getDefaultEntryCost(staticEntry, singleHeroEntry);
        }
        if (match !== 17) {
          if (match >= 6) {
            return getDefaultEntryCost(staticEntry, singleHeroEntry);
          }
          switch (match) {
            case /* Nimble */1 :
            case /* Blessed */2 :
            case /* Luck */3 :
                return getDefaultEntryCost(staticEntry, singleHeroEntry);
            case /* Aptitude */0 :
            case /* ExceptionalSkill */4 :
                exit = 1;
                break;
            case /* ExceptionalCombatTechnique */5 :
                exit = 2;
                break;
            
          }
        } else {
          exit = 2;
        }
        switch (exit) {
          case 1 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(singleHeroEntry.options), (function (sid) {
                            if (typeof sid === "number") {
                              return ;
                            }
                            var variant = sid[0];
                            if (variant !== -384382742) {
                              if (variant !== 290194801) {
                                if (variant !== 345443720) {
                                  return ;
                                }
                                if (!apValue$1.tag) {
                                  return ;
                                }
                                var apValues = apValue$1[0];
                                return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.spells), (function ($$static) {
                                              return Ley_List$OptolithClient.Safe.atMay(apValues, IC$OptolithClient.icToIx($$static.ic));
                                            }));
                              }
                              if (!apValue$1.tag) {
                                return ;
                              }
                              var apValues$1 = apValue$1[0];
                              return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.skills), (function ($$static) {
                                            return Ley_List$OptolithClient.Safe.atMay(apValues$1, IC$OptolithClient.icToIx($$static.ic));
                                          }));
                            }
                            if (!apValue$1.tag) {
                              return ;
                            }
                            var apValues$2 = apValue$1[0];
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.liturgicalChants), (function ($$static) {
                                          return Ley_List$OptolithClient.Safe.atMay(apValues$2, IC$OptolithClient.icToIx($$static.ic));
                                        }));
                          }));
          case 2 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(singleHeroEntry.options), (function (sid) {
                            if (typeof sid === "number") {
                              return ;
                            }
                            if (sid[0] !== -920806756) {
                              return ;
                            }
                            if (!apValue$1.tag) {
                              return ;
                            }
                            var apValues = apValue$1[0];
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.combatTechniques), (function ($$static) {
                                          return Ley_List$OptolithClient.Safe.atMay(apValues, IC$OptolithClient.icToIx($$static.ic));
                                        }));
                          }));
          
        }
        break;
    case /* Disadvantage */1 :
        var match$1 = Ids$OptolithClient.DisadvantageId.fromInt(staticEntry[0].id);
        if (typeof match$1 !== "number") {
          return getDefaultEntryCost(staticEntry, singleHeroEntry);
        }
        if (match$1 < 12) {
          return getDefaultEntryCost(staticEntry, singleHeroEntry);
        }
        switch (match$1 - 12 | 0) {
          case /* AfraidOf */0 :
              if (sid1 === undefined) {
                return ;
              }
              if (typeof sid1 === "number") {
                return ;
              }
              if (sid1[0] !== 61643255) {
                return ;
              }
              var selected_option = sid1[1];
              var matchOption = function (target_option, current) {
                if (current !== undefined && !(typeof current === "number" || current[0] !== 61643255)) {
                  return current[1] === target_option;
                } else {
                  return false;
                }
              };
              var isPersonalityFlawNotPaid = function (target_option, paid_entries_max) {
                if (target_option === selected_option) {
                  return Ley_List$OptolithClient.countBy((function (e) {
                                if (matchOption(target_option, Ley_Option$OptolithClient.listToOption(e.options))) {
                                  return Ley_Option$OptolithClient.isNone(e.customCost);
                                } else {
                                  return false;
                                }
                              }), heroEntry.active) > (
                          isEntryToAdd ? paid_entries_max - 1 | 0 : paid_entries_max
                        );
                } else {
                  return false;
                }
              };
              if (isPersonalityFlawNotPaid(7, 1) || isPersonalityFlawNotPaid(8, 2)) {
                return 0;
              } else {
                return getSelectOptionCost(staticEntry, /* `Generic */[
                            61643255,
                            selected_option
                          ]);
              }
          case /* Slow */2 :
              return Ley_Option$OptolithClient.Foldable.find((function (param) {
                            return Ley_List$OptolithClient.countBy((function (e) {
                                          return Ley_Option$OptolithClient.isNone(e.customCost);
                                        }), heroEntry.active) > (
                                    isEntryToAdd ? 2 : 3
                                  );
                          }), ensureFlat(apValue$1));
          case /* DecreasedArcanePower */6 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(singleHeroEntry.options), (function (sid) {
                            if (typeof sid === "number") {
                              return ;
                            }
                            if (sid[0] !== 290194801) {
                              return ;
                            }
                            if (!apValue$1.tag) {
                              return ;
                            }
                            var apValues = apValue$1[0];
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.skills), (function ($$static) {
                                          return Ley_List$OptolithClient.Safe.atMay(apValues, IC$OptolithClient.icToIx($$static.ic));
                                        }));
                          }));
          case /* Poor */1 :
          case /* DecreasedKarmaPoints */7 :
              break;
          case /* NoFlyingBalm */3 :
          case /* NoFamiliar */4 :
          case /* MagicalRestriction */5 :
          case /* DecreasedLifePoints */8 :
          case /* DecreasedSpirit */9 :
          case /* DecreasedToughness */10 :
          case /* BadLuck */11 :
          case /* PersonalityFlaw */12 :
              return getDefaultEntryCost(staticEntry, singleHeroEntry);
          
        }
        return Ley_Option$OptolithClient.Monad.$great$great$eq(level, (function (level) {
                      var match = Ley_List$OptolithClient.Foldable.foldr((function (active, param) {
                              var prevSndMax = param[1];
                              var prevMax = param[0];
                              var match = active.level;
                              var match$1 = active.customCost;
                              if (match !== undefined && !(match$1 !== undefined || match <= prevMax)) {
                                return /* tuple */[
                                        match,
                                        prevMax
                                      ];
                              } else {
                                return /* tuple */[
                                        prevMax,
                                        prevSndMax
                                      ];
                              }
                            }), /* tuple */[
                            0,
                            0
                          ], heroEntry.active);
                      if (match[0] > level || Ley_List$OptolithClient.countBy((function (e) {
                                return Ley_Option$OptolithClient.Foldable.elem(level, e.level);
                              }), heroEntry.active) > (
                          isEntryToAdd ? 0 : 1
                        )) {
                        return ;
                      }
                      var partial_arg = level - match[1] | 0;
                      return Ley_Option$OptolithClient.Functor.$less$amp$great(ensureFlat(apValue$1), (function (param) {
                                    return Caml_int32.imul(partial_arg, param);
                                  }));
                    }));
    case /* SpecialAbility */2 :
        var match$2 = Ids$OptolithClient.SpecialAbilityId.fromInt(staticEntry[0].id);
        var exit$1 = 0;
        if (typeof match$2 !== "number") {
          return getDefaultEntryCost(staticEntry, singleHeroEntry);
        }
        if (match$2 < 82) {
          var switcher = match$2 - 42 | 0;
          if (!(switcher > 38 || switcher < 0)) {
            if (switcher !== 29) {
              return getDefaultEntryCost(staticEntry, singleHeroEntry);
            } else {
              return Ley_Option$OptolithClient.Monad.$great$great$eq(ensureFlat(apValue$1), (function (flatAp) {
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(sid1, getGenericId), (function (languageId) {
                                          return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.specialAbilityToInt(/* Language */6), hero.specialAbilities), (function (language) {
                                                        return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_List$OptolithClient.Foldable.find((function (e) {
                                                                          return Ley_Option$OptolithClient.Foldable.elem(languageId, Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(e.options), getGenericId));
                                                                        }), language.active), (function (selectedLanguage) {
                                                                      return Ley_Option$OptolithClient.Functor.$less$amp$great(selectedLanguage.level, (function (param) {
                                                                                    if (param !== 4) {
                                                                                      return flatAp;
                                                                                    } else {
                                                                                      return 0;
                                                                                    }
                                                                                  }));
                                                                    }));
                                                      }));
                                        }));
                          }));
            }
          }
          if (switcher >= 39) {
            exit$1 = 3;
          } else {
            switch (switcher + 42 | 0) {
              case /* SkillSpecialization */0 :
                  return Ley_Option$OptolithClient.Functor.$less$amp$great(Ley_Option$OptolithClient.Monad.$great$great$eq(sid1, (function (param) {
                                    return getSkillFromOption(staticData, param);
                                  })), (function (skill) {
                                return Caml_int32.imul(Ley_List$OptolithClient.countBy((function (e) {
                                                  if (Ley_Option$OptolithClient.Foldable.elem(/* `Skill */[
                                                          290194801,
                                                          skill.id
                                                        ], Ley_Option$OptolithClient.listToOption(e.options))) {
                                                    return Ley_Option$OptolithClient.isNone(e.customCost);
                                                  } else {
                                                    return false;
                                                  }
                                                }), heroEntry.active) + (
                                            isEntryToAdd ? 1 : 0
                                          ) | 0, IC$OptolithClient.getAPForActivatation(skill.ic));
                              }));
              case /* Language */6 :
                  return Ley_Option$OptolithClient.Monad.$great$great$eq(level, (function (level) {
                                if (level !== 4) {
                                  return Ley_Option$OptolithClient.Functor.$less$amp$great(ensureFlat(apValue$1), (function (param) {
                                                return Caml_int32.imul(level, param);
                                              }));
                                } else {
                                  return 0;
                                }
                              }));
              case /* PropertyKnowledge */10 :
              case /* AspectKnowledge */12 :
                  exit$1 = 1;
                  break;
              case /* AdaptionZauber */16 :
              case /* FavoriteSpellwork */18 :
                  exit$1 = 2;
                  break;
              case /* TraditionWitches */19 :
                  var decreaseCost = function (id, cost) {
                    if (Ley_Option$OptolithClient.option(false, isActive, Curry._2(Ley_IntMap$OptolithClient.lookup, id, hero.disadvantages))) {
                      return cost - 10 | 0;
                    } else {
                      return cost;
                    }
                  };
                  return Ley_Option$OptolithClient.Functor.$less$amp$great(ensureFlat(apValue$1), (function (flatAp) {
                                return decreaseCost(Id$OptolithClient.disadvantageToInt(/* NoFamiliar */4), decreaseCost(Id$OptolithClient.disadvantageToInt(/* NoFlyingBalm */3), flatAp));
                              }));
              case /* Forschungsgebiet */26 :
              case /* Expertenwissen */27 :
              case /* Wissensdurst */28 :
                  exit$1 = 3;
                  break;
              case /* Recherchegespuer */29 :
                  return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, Id$OptolithClient.specialAbilityToInt(/* Wissensdurst */28), hero.specialAbilities), (function (wissensdurst) {
                                return Ley_Option$OptolithClient.Monad.$great$great$eq(ensurePerLevel(apValue$1), (function (apPerLevel) {
                                              var getCostFromHeroEntry = function (entry) {
                                                return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(entry.options), (function (param) {
                                                                  return getSkillFromOption(staticData, param);
                                                                })), (function (skill) {
                                                              return Ley_List$OptolithClient.Safe.atMay(apPerLevel, IC$OptolithClient.icToIx(skill.ic));
                                                            }));
                                              };
                                              return Ley_Option$OptolithClient.Monad.liftM2((function (prim, prim$1) {
                                                            return prim + prim$1 | 0;
                                                          }), getCostFromHeroEntry(singleHeroEntry), Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(wissensdurst.active), (function (fst) {
                                                                return getCostFromHeroEntry(singleToSingleWithId(heroEntry, fst));
                                                              })));
                                            }));
                              }));
              case /* TerrainKnowledge */1 :
              case /* CraftInstruments */2 :
              case /* Hunter */3 :
              case /* AreaKnowledge */4 :
              case /* Literacy */5 :
              case /* CombatReflexes */7 :
              case /* ImprovedDodge */8 :
              case /* TraditionGuildMages */9 :
              case /* PropertyFocus */11 :
              case /* TraditionChurchOfPraios */13 :
              case /* Feuerschlucker */14 :
              case /* CombatStyleCombination */15 :
              case /* Exorzist */17 :
              case /* MagicStyleCombination */20 :
              case /* Harmoniezauberei */21 :
              case /* Matrixzauberei */22 :
              case /* TraditionElves */23 :
              case /* TraditionDruids */24 :
              case /* SpellEnhancement */25 :
              case /* PredigtDerGemeinschaft */30 :
              case /* PredigtDerZuversicht */31 :
              case /* PredigtDesGottvertrauens */32 :
              case /* PredigtDesWohlgefallens */33 :
              case /* PredigtWiderMissgeschicke */34 :
              case /* VisionDerBestimmung */35 :
              case /* VisionDerEntrueckung */36 :
              case /* VisionDerGottheit */37 :
              case /* VisionDesSchicksals */38 :
              case /* VisionDesWahrenGlaubens */39 :
              case /* HoheWeihe */40 :
                  return getDefaultEntryCost(staticEntry, singleHeroEntry);
              case /* Lieblingsliturgie */41 :
                  return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(singleHeroEntry.options), (function (sid) {
                                if (typeof sid === "number") {
                                  return ;
                                }
                                if (sid[0] !== -384382742) {
                                  return ;
                                }
                                if (!apValue$1.tag) {
                                  return ;
                                }
                                var apValues = apValue$1[0];
                                return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.liturgicalChants), (function ($$static) {
                                              return Ley_List$OptolithClient.Safe.atMay(apValues, IC$OptolithClient.icToIx($$static.ic));
                                            }));
                              }));
              
            }
          }
        } else if (match$2 >= 85) {
          if (match$2 >= 91) {
            return getDefaultEntryCost(staticEntry, singleHeroEntry);
          }
          exit$1 = 3;
        } else {
          if (match$2 !== 83) {
            return getDefaultEntryCost(staticEntry, singleHeroEntry);
          }
          exit$1 = 3;
        }
        switch (exit$1) {
          case 1 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(ensurePerLevel(apValue$1), (function (apPerLevel) {
                            var amountActive = Ley_List$OptolithClient.countBy((function (e) {
                                    return Ley_Option$OptolithClient.isNone(e.customCost);
                                  }), heroEntry.active);
                            var index = amountActive + (
                              isEntryToAdd ? 0 : -1
                            ) | 0;
                            return Ley_List$OptolithClient.Safe.atMay(apPerLevel, index);
                          }));
          case 2 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(singleHeroEntry.options), (function (sid) {
                            if (typeof sid === "number") {
                              return ;
                            }
                            if (sid[0] !== 345443720) {
                              return ;
                            }
                            if (!apValue$1.tag) {
                              return ;
                            }
                            var apValues = apValue$1[0];
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.spells), (function ($$static) {
                                          return Ley_List$OptolithClient.Safe.atMay(apValues, IC$OptolithClient.icToIx($$static.ic));
                                        }));
                          }));
          case 3 :
              return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.listToOption(singleHeroEntry.options), (function (sid) {
                            if (typeof sid === "number") {
                              return ;
                            }
                            if (sid[0] !== 290194801) {
                              return ;
                            }
                            if (!apValue$1.tag) {
                              return ;
                            }
                            var apValues = apValue$1[0];
                            return Ley_Option$OptolithClient.Monad.$great$great$eq(Curry._2(Ley_IntMap$OptolithClient.lookup, sid[1], staticData.skills), (function ($$static) {
                                          return Ley_List$OptolithClient.Safe.atMay(apValues, IC$OptolithClient.icToIx($$static.ic));
                                        }));
                          }));
          
        }
        break;
    
  }
}

function getCost(isEntryToAdd, automaticAdvantages, staticData, hero, staticEntry, heroEntry, singleHeroEntry) {
  var isAutomatic = Ley_List$OptolithClient.elem(singleHeroEntry.id, automaticAdvantages);
  var modifyAbs;
  switch (staticEntry.tag | 0) {
    case /* Disadvantage */1 :
        modifyAbs = Ley_Int$OptolithClient.negate;
        break;
    case /* Advantage */0 :
    case /* SpecialAbility */2 :
        modifyAbs = Ley_Function$OptolithClient.id;
        break;
    
  }
  var customCost = singleHeroEntry.customCost;
  if (customCost !== undefined) {
    return /* tuple */[
            Curry._1(modifyAbs, customCost),
            isAutomatic
          ];
  } else {
    return /* tuple */[
            Curry._1(modifyAbs, Ley_Option$OptolithClient.fromOption(0, getEntrySpecificCost(isEntryToAdd, staticData, hero, staticEntry, heroEntry, singleHeroEntry))),
            isAutomatic
          ];
  }
}

var Names = {
  getName: getName
};

var AdventurePoints = {
  getCost: getCost
};

export {
  isActive ,
  isActiveM ,
  Convert ,
  Accessors ,
  SelectOptions ,
  Names ,
  AdventurePoints ,
  
}
/* Ley_IntMap-OptolithClient Not a pure module */
