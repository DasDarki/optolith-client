// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Chars$OptolithClient from "./Chars.bs.js";
import * as Ley_Ix$OptolithClient from "../../Data/Ley_Ix.bs.js";
import * as Ley_Int$OptolithClient from "../../Data/Ley_Int.bs.js";
import * as Ley_Bool$OptolithClient from "../../Data/Ley_Bool.bs.js";
import * as Ley_List$OptolithClient from "../../Data/Ley_List.bs.js";
import * as Ley_IntSet$OptolithClient from "../../Data/Ley_IntSet.bs.js";
import * as Ley_Option$OptolithClient from "../../Data/Ley_Option.bs.js";
import * as Ley_StrMap$OptolithClient from "../../Data/Ley_StrMap.bs.js";
import * as Ley_StrSet$OptolithClient from "../../Data/Ley_StrSet.bs.js";
import * as Ley_Function$OptolithClient from "../../Data/Ley_Function.bs.js";
import * as AdvancedFiltering$OptolithClient from "./AdvancedFiltering.bs.js";

function isPublicationActive(staticPublications, rules, id) {
  var p = Curry._2(Ley_StrMap$OptolithClient.lookup, id, staticPublications);
  if (p !== undefined) {
    if (p.isCore || rules.areAllPublicationsActive && !p.isAdultContent) {
      return true;
    } else {
      return Curry._2(Ley_StrSet$OptolithClient.member, id, rules.activePublications);
    }
  } else {
    return false;
  }
}

function isAvailable(acc, staticPublications, rules, x) {
  return Ley_List$OptolithClient.Foldable.any((function (param) {
                return isPublicationActive(staticPublications, rules, param.id);
              }), Curry._1(acc, x));
}

function isAvailableNull(acc, staticPublications, rules, x) {
  var refs = Curry._1(acc, x);
  if (refs) {
    return Ley_List$OptolithClient.Foldable.any((function (param) {
                  return isPublicationActive(staticPublications, rules, param.id);
                }), refs);
  } else {
    return true;
  }
}

function isAvailableNullPred(acc, pred, staticPublications, rules, x) {
  var refs = Curry._1(acc, x);
  if (refs && !Curry._1(pred, x)) {
    return Ley_List$OptolithClient.Foldable.any((function (param) {
                  return isPublicationActive(staticPublications, rules, param.id);
                }), refs);
  } else {
    return true;
  }
}

function isFromCore(acc, staticPublications, x) {
  return Ley_List$OptolithClient.Foldable.any((function (param) {
                return Ley_Option$OptolithClient.Foldable.any((function (p) {
                              return p.isCore;
                            }), Curry._2(Ley_StrMap$OptolithClient.lookup, param.id, staticPublications));
              }), Curry._1(acc, x));
}

function insertPages(param) {
  var lst = param[1];
  var fst = param[0];
  if (fst === lst) {
    return Curry._1(Ley_IntSet$OptolithClient.insert, fst);
  }
  var partial_arg = Ley_Ix$OptolithClient.range([
        fst,
        lst
      ]);
  return function (param) {
    return Ley_Function$OptolithClient.flip((function (param, param$1) {
                  return Ley_List$OptolithClient.Foldable.foldr(Ley_IntSet$OptolithClient.insert, param, param$1);
                }), partial_arg, param);
  };
}

function insertPagesByPublication(param) {
  var page = param.page;
  return Curry._2(Ley_StrMap$OptolithClient.alter, (function (maybeExistingPages) {
                return Caml_option.some(Curry._1(insertPages(page), Ley_Option$OptolithClient.fromOption(Ley_IntSet$OptolithClient.empty, maybeExistingPages)));
              }), param.id);
}

function groupRanges(pages) {
  return Ley_List$OptolithClient.reverse(Ley_List$OptolithClient.Foldable.foldr((function (page, groupedReversedPages) {
                    if (!groupedReversedPages) {
                      return {
                              hd: {
                                TAG: /* Single */0,
                                _0: page
                              },
                              tl: /* [] */0
                            };
                    }
                    var prevPage = groupedReversedPages.hd;
                    if (prevPage.TAG) {
                      var prevLastPage = prevPage._1;
                      if (page === prevLastPage) {
                        return groupedReversedPages;
                      } else if (page === (prevLastPage + 1 | 0)) {
                        return {
                                hd: {
                                  TAG: /* Range */1,
                                  _0: prevPage._0,
                                  _1: page
                                },
                                tl: groupedReversedPages.tl
                              };
                      } else {
                        return {
                                hd: {
                                  TAG: /* Single */0,
                                  _0: page
                                },
                                tl: groupedReversedPages
                              };
                      }
                    }
                    var prevPage$1 = prevPage._0;
                    if (page === prevPage$1) {
                      return groupedReversedPages;
                    } else if (page === (prevPage$1 + 1 | 0)) {
                      return {
                              hd: {
                                TAG: /* Range */1,
                                _0: prevPage$1,
                                _1: page
                              },
                              tl: groupedReversedPages.tl
                            };
                    } else {
                      return {
                              hd: {
                                TAG: /* Single */0,
                                _0: page
                              },
                              tl: groupedReversedPages
                            };
                    }
                  }), /* [] */0, pages));
}

function getGroupedUniquePagesFromPublicationLists(param) {
  return Ley_List$OptolithClient.Foldable.foldr((function (param, param$1) {
                return Ley_Function$OptolithClient.flip((function (param, param$1) {
                              return Ley_List$OptolithClient.Foldable.foldr(insertPagesByPublication, param, param$1);
                            }), param, param$1);
              }), Ley_StrMap$OptolithClient.empty, param);
}

var getGroupedRefsFromGroupedUniquePages = Curry._2(Ley_StrMap$OptolithClient.foldrWithKey, (function (id, uniquePages) {
        var partial_arg_pages = groupRanges(Curry._1(Ley_IntSet$OptolithClient.Foldable.toList, uniquePages));
        var partial_arg = {
          id: id,
          pages: partial_arg_pages
        };
        return function (param) {
          return Ley_List$OptolithClient.cons(partial_arg, param);
        };
      }), /* [] */0);

function showPages(pages) {
  return Ley_List$OptolithClient.intercalate(", ", Ley_List$OptolithClient.map((function (page) {
                    if (page.TAG) {
                      return Ley_Int$OptolithClient.show(page._0) + (Chars$OptolithClient.ndash + Ley_Int$OptolithClient.show(page._1));
                    } else {
                      return Ley_Int$OptolithClient.show(page._0);
                    }
                  }), pages));
}

function areExcludesFilled(excludeSrcss) {
  return Ley_List$OptolithClient.Foldable.any(Ley_List$OptolithClient.Extra.notNull, excludeSrcss);
}

function showGroupedSources(staticData, excludeSrcss, srcss) {
  var tmp;
  if (areExcludesFilled(excludeSrcss)) {
    var partial_arg = getGroupedUniquePagesFromPublicationLists(excludeSrcss);
    tmp = (function (param) {
        return Curry._3(Ley_StrMap$OptolithClient.foldrWithKey, (function (key, excludePages) {
                      return Curry._2(Ley_StrMap$OptolithClient.alter, (function (maybePages) {
                                    return Ley_Option$OptolithClient.Monad.$great$great$eq(maybePages, (function (pages) {
                                                  return Ley_Option$OptolithClient.ensure((function (param) {
                                                                return Ley_Bool$OptolithClient.notP(Ley_IntSet$OptolithClient.Foldable.$$null, param);
                                                              }), Ley_Function$OptolithClient.flip(Ley_IntSet$OptolithClient.difference, excludePages, pages));
                                                }));
                                  }), key);
                    }), param, partial_arg);
      });
  } else {
    tmp = Ley_Function$OptolithClient.id;
  }
  var srcs = Curry._1(getGroupedRefsFromGroupedUniquePages, tmp(getGroupedUniquePagesFromPublicationLists(srcss)));
  var partial_arg$1 = AdvancedFiltering$OptolithClient.compareLocale(staticData);
  return Ley_List$OptolithClient.intercalate("; ", Ley_List$OptolithClient.map((function (param) {
                    return param[0] + (" " + param[1]);
                  }), Ley_List$OptolithClient.sortBy(function (param, param$1) {
                        return Ley_Function$OptolithClient.on(partial_arg$1, (function (prim) {
                                      return prim[0];
                                    }), param, param$1);
                      })(Ley_Option$OptolithClient.mapOption((function (src) {
                            return Ley_Option$OptolithClient.Functor.$less$amp$great(Curry._2(Ley_StrMap$OptolithClient.lookup, src.id, staticData.publications), (function (book) {
                                          return [
                                                  book.name,
                                                  showPages(src.pages)
                                                ];
                                        }));
                          }), srcs))));
}

var Grouping = {
  showGroupedSources: showGroupedSources
};

export {
  isAvailable ,
  isAvailableNull ,
  isAvailableNullPred ,
  isFromCore ,
  Grouping ,
  
}
/* getGroupedRefsFromGroupedUniquePages Not a pure module */
