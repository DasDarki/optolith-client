// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Id$OptolithClient from "../Constants/Id.bs.js";
import * as Hero$OptolithClient from "../Models/Hero.bs.js";
import * as Ley_List$OptolithClient from "../../Data/Ley_List.bs.js";
import * as Ley_IntMap$OptolithClient from "../../Data/Ley_IntMap.bs.js";
import * as Ley_Option$OptolithClient from "../../Data/Ley_Option.bs.js";

function flattenSkillDependencies(getValueForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.tag) {
                  return dep.value;
                }
                var isMatchedByOtherEntry = Ley_List$OptolithClient.Foldable.any((function (value) {
                        return value >= dep.value;
                      }), Ley_List$OptolithClient.map(getValueForTargetId, Ley_List$OptolithClient.$$delete(id, targets[0])));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep.value;
                }
              }), dependencies);
}

function flattenActivatableSkillDependencies(getValueForTargetId, id, dependencies) {
  return Ley_Option$OptolithClient.mapOption((function (dep) {
                var targets = dep.target;
                if (!targets.tag) {
                  return dep.value;
                }
                var isMatchedByOtherEntry = Ley_List$OptolithClient.Foldable.any((function (value) {
                        if (value) {
                          return value[0] >= dep.value;
                        } else {
                          return false;
                        }
                      }), Ley_List$OptolithClient.map(getValueForTargetId, Ley_List$OptolithClient.$$delete(id, targets[0])));
                if (isMatchedByOtherEntry) {
                  return ;
                } else {
                  return dep.value;
                }
              }), dependencies);
}

var Flatten = {
  flattenSkillDependencies: flattenSkillDependencies,
  flattenActivatableSkillDependencies: flattenActivatableSkillDependencies
};

function addAttributeDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.attributes = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Attribute.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.attributes);
  return newrecord;
}

function addSkillDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.skills = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Skill.emptySkill(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.skills);
  return newrecord;
}

function addCombatTechniqueDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.combatTechniques = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Skill.emptyCombatTechnique(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.combatTechniques);
  return newrecord;
}

function addSpellDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.spells = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.ActivatableSkill.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.spells);
  return newrecord;
}

function addLiturgicalChantDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.liturgicalChants = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.ActivatableSkill.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  value: heroEntry$1.value,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.liturgicalChants);
  return newrecord;
}

function addAdvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.advantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Activatable.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.advantages);
  return newrecord;
}

function addDisadvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.disadvantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Activatable.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.disadvantages);
  return newrecord;
}

function addSpecialAbilityDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.specialAbilities = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          var heroEntry$1 = Ley_Option$OptolithClient.fromOption(Hero$OptolithClient.Activatable.empty(id), heroEntry);
          return {
                  id: heroEntry$1.id,
                  active: heroEntry$1.active,
                  dependencies: /* :: */[
                    dep,
                    heroEntry$1.dependencies
                  ]
                };
        }), id, hero.specialAbilities);
  return newrecord;
}

var Single = {
  addAttributeDependency: addAttributeDependency,
  addSkillDependency: addSkillDependency,
  addCombatTechniqueDependency: addCombatTechniqueDependency,
  addSpellDependency: addSpellDependency,
  addLiturgicalChantDependency: addLiturgicalChantDependency,
  addAdvantageDependency: addAdvantageDependency,
  addDisadvantageDependency: addDisadvantageDependency,
  addSpecialAbilityDependency: addSpecialAbilityDependency
};

function addAttributeDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addAttributeDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addAttributeDependency(dep, hero, id[0]);
  }
}

function addSkillDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addSkillDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addSkillDependency(dep, hero, id[0]);
  }
}

function addCombatTechniqueDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addCombatTechniqueDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addCombatTechniqueDependency(dep, hero, id[0]);
  }
}

function addSpellDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addSpellDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addSpellDependency(dep, hero, id[0]);
  }
}

function addLiturgicalChantDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addLiturgicalChantDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addLiturgicalChantDependency(dep, hero, id[0]);
  }
}

function addAdvantageDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addAdvantageDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addAdvantageDependency(dep, hero, id[0]);
  }
}

function addDisadvantageDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addDisadvantageDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addDisadvantageDependency(dep, hero, id[0]);
  }
}

function addSpecialAbilityDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return addSpecialAbilityDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return addSpecialAbilityDependency(dep, hero, id[0]);
  }
}

var Add = {
  Single: Single,
  addAttributeDependency: addAttributeDependency$1,
  addSkillDependency: addSkillDependency$1,
  addCombatTechniqueDependency: addCombatTechniqueDependency$1,
  addSpellDependency: addSpellDependency$1,
  addLiturgicalChantDependency: addLiturgicalChantDependency$1,
  addAdvantageDependency: addAdvantageDependency$1,
  addDisadvantageDependency: addDisadvantageDependency$1,
  addSpecialAbilityDependency: addSpecialAbilityDependency$1
};

function removeAttributeDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.attributes = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Attribute.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.attributes);
  return newrecord;
}

function removeSkillDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.skills = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Skill.isUnusedSkill(heroEntry);
                                    }), param);
                      }));
        }), id, hero.skills);
  return newrecord;
}

function removeCombatTechniqueDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.combatTechniques = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Skill.isUnusedCombatTechnique(heroEntry);
                                    }), param);
                      }));
        }), id, hero.combatTechniques);
  return newrecord;
}

function removeSpellDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.spells = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.ActivatableSkill.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.spells);
  return newrecord;
}

function removeLiturgicalChantDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.liturgicalChants = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    value: heroEntry.value,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.ActivatableSkill.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.liturgicalChants);
  return newrecord;
}

function removeAdvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.advantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Activatable.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.advantages);
  return newrecord;
}

function removeDisadvantageDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.disadvantages = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Activatable.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.disadvantages);
  return newrecord;
}

function removeSpecialAbilityDependency(dep, hero, id) {
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.specialAbilities = Curry._3(Ley_IntMap$OptolithClient.alter, (function (heroEntry) {
          return Ley_Option$OptolithClient.Monad.$great$great$eq(Ley_Option$OptolithClient.Functor.$less$amp$great(heroEntry, (function (heroEntry) {
                            return {
                                    id: heroEntry.id,
                                    active: heroEntry.active,
                                    dependencies: Ley_List$OptolithClient.$$delete(dep, heroEntry.dependencies)
                                  };
                          })), (function (param) {
                        return Ley_Option$OptolithClient.ensure((function (heroEntry) {
                                      return !Hero$OptolithClient.Activatable.isUnused(heroEntry);
                                    }), param);
                      }));
        }), id, hero.specialAbilities);
  return newrecord;
}

var Single$1 = {
  removeAttributeDependency: removeAttributeDependency,
  removeSkillDependency: removeSkillDependency,
  removeCombatTechniqueDependency: removeCombatTechniqueDependency,
  removeSpellDependency: removeSpellDependency,
  removeLiturgicalChantDependency: removeLiturgicalChantDependency,
  removeAdvantageDependency: removeAdvantageDependency,
  removeDisadvantageDependency: removeDisadvantageDependency,
  removeSpecialAbilityDependency: removeSpecialAbilityDependency
};

function removeAttributeDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeAttributeDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeAttributeDependency(dep, hero, id[0]);
  }
}

function removeSkillDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeSkillDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeSkillDependency(dep, hero, id[0]);
  }
}

function removeCombatTechniqueDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeCombatTechniqueDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeCombatTechniqueDependency(dep, hero, id[0]);
  }
}

function removeSpellDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeSpellDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeSpellDependency(dep, hero, id[0]);
  }
}

function removeLiturgicalChantDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeLiturgicalChantDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeLiturgicalChantDependency(dep, hero, id[0]);
  }
}

function removeAdvantageDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeAdvantageDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeAdvantageDependency(dep, hero, id[0]);
  }
}

function removeDisadvantageDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeDisadvantageDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeDisadvantageDependency(dep, hero, id[0]);
  }
}

function removeSpecialAbilityDependency$1(dep, hero) {
  var id = dep.target;
  if (id.tag) {
    return Ley_List$OptolithClient.Foldable.foldl((function (param, param$1) {
                  return removeSpecialAbilityDependency(dep, param, param$1);
                }), hero, id[0]);
  } else {
    return removeSpecialAbilityDependency(dep, hero, id[0]);
  }
}

var Remove = {
  Single: Single$1,
  removeAttributeDependency: removeAttributeDependency$1,
  removeSkillDependency: removeSkillDependency$1,
  removeCombatTechniqueDependency: removeCombatTechniqueDependency$1,
  removeSpellDependency: removeSpellDependency$1,
  removeLiturgicalChantDependency: removeLiturgicalChantDependency$1,
  removeAdvantageDependency: removeAdvantageDependency$1,
  removeDisadvantageDependency: removeDisadvantageDependency$1,
  removeSpecialAbilityDependency: removeSpecialAbilityDependency$1
};

function getTransferredUnfamiliarById(single) {
  var match = Id$OptolithClient.specialAbilityFromInt(single.id);
  if (typeof match !== "number") {
    return /* [] */0;
  }
  if (match >= 80) {
    if (match !== 91) {
      if (match !== 95) {
        return /* [] */0;
      } else {
        return /* :: */[
                {
                  id: /* Spells */0,
                  srcId: single.id
                },
                /* [] */0
              ];
      }
    }
    
  } else if (match >= 77) {
    if (match < 79) {
      return Ley_Option$OptolithClient.mapOption((function (param) {
                    if (typeof param === "number" || param[0] !== 345443720) {
                      return ;
                    } else {
                      return {
                              id: /* Spell */Block.__(0, [param[1]]),
                              srcId: single.id
                            };
                    }
                  }), Ley_List$OptolithClient.take(3, single.options));
    }
    
  } else if (match !== 9) {
    return /* [] */0;
  }
  var match$1 = single.options;
  if (!match$1) {
    return /* [] */0;
  }
  var match$2 = match$1[0];
  if (typeof match$2 === "number" || match$2[0] !== 345443720) {
    return /* [] */0;
  } else {
    return /* :: */[
            {
              id: /* Spell */Block.__(0, [match$2[1]]),
              srcId: single.id
            },
            /* [] */0
          ];
  }
}

function addTransferUnfamiliarDependencies(single, hero) {
  var xs = getTransferredUnfamiliarById(single);
  if (!xs) {
    return hero;
  }
  var newrecord = Caml_obj.caml_obj_dup(hero);
  newrecord.transferredUnfamiliarSpells = Pervasives.$at(xs, hero.transferredUnfamiliarSpells);
  return newrecord;
}

var TransferredUnfamiliar = {
  getTransferredUnfamiliarById: getTransferredUnfamiliarById,
  addTransferUnfamiliarDependencies: addTransferUnfamiliarDependencies
};

export {
  Flatten ,
  Add ,
  Remove ,
  TransferredUnfamiliar ,
  
}
/* Ley_IntMap-OptolithClient Not a pure module */
