// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_int from "bs-platform/lib/es6/js_int.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Ley_Set$OptolithClient from "./Ley_Set.bs.js";

var compare = Caml_obj.caml_compare;

var IntSet = Ley_Set$OptolithClient.Make({
      compare: compare
    });

var include = IntSet.Foldable;

var foldr = include.foldr;

var sum = Curry._2(foldr, (function (prim, prim$1) {
        return prim + prim$1 | 0;
      }), 0);

var product = Curry._2(foldr, Caml_int32.imul, 1);

var maximum = Curry._2(foldr, (function (prim, prim$1) {
        return Math.max(prim, prim$1);
      }), Js_int.min);

var minimum = Curry._2(foldr, (function (prim, prim$1) {
        return Math.min(prim, prim$1);
      }), Js_int.max);

var Foldable_foldl = include.foldl;

var Foldable_toList = include.toList;

var Foldable_null = include.$$null;

var Foldable_length = include.length;

var Foldable_elem = include.elem;

var Foldable_concatMap = include.concatMap;

var Foldable_any = include.any;

var Foldable_all = include.all;

var Foldable_notElem = include.notElem;

var Foldable_find = include.find;

var Foldable = {
  foldr: foldr,
  foldl: Foldable_foldl,
  toList: Foldable_toList,
  $$null: Foldable_null,
  length: Foldable_length,
  elem: Foldable_elem,
  sum: sum,
  product: product,
  maximum: maximum,
  minimum: minimum,
  concatMap: Foldable_concatMap,
  any: Foldable_any,
  all: Foldable_all,
  notElem: Foldable_notElem,
  find: Foldable_find
};

var empty = IntSet.empty;

var singleton = IntSet.singleton;

var fromList = IntSet.fromList;

var insert = IntSet.insert;

var $$delete = IntSet.$$delete;

var toggle = IntSet.toggle;

var member = IntSet.member;

var notMember = IntSet.notMember;

var size = IntSet.size;

var union = IntSet.union;

var difference = IntSet.difference;

var filter = IntSet.filter;

var map = IntSet.map;

var elems = IntSet.elems;

export {
  Foldable ,
  empty ,
  singleton ,
  fromList ,
  insert ,
  $$delete ,
  toggle ,
  member ,
  notMember ,
  size ,
  union ,
  difference ,
  filter ,
  map ,
  elems ,
  
}
/* IntSet Not a pure module */
