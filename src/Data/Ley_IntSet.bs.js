// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_int = require("bs-platform/lib/js/js_int.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Ley_Set$OptolithClient = require("./Ley_Set.bs.js");

var compare = Caml_obj.caml_compare;

var IntSet = Ley_Set$OptolithClient.Make({
      compare: compare
    });

var include = IntSet.Foldable;

var foldr = include.foldr;

var sum = Curry._2(foldr, (function (prim, prim$1) {
        return prim + prim$1 | 0;
      }), 0);

var product = Curry._2(foldr, Caml_int32.imul, 1);

var maximum = Curry._2(foldr, (function (prim, prim$1) {
        return Math.max(prim, prim$1);
      }), Js_int.min);

var minimum = Curry._2(foldr, (function (prim, prim$1) {
        return Math.min(prim, prim$1);
      }), Js_int.max);

var Foldable_foldl = include.foldl;

var Foldable_toList = include.toList;

var Foldable_null = include.$$null;

var Foldable_length = include.length;

var Foldable_elem = include.elem;

var Foldable_concatMap = include.concatMap;

var Foldable_any = include.any;

var Foldable_all = include.all;

var Foldable_notElem = include.notElem;

var Foldable_find = include.find;

var Foldable = {
  foldr: foldr,
  foldl: Foldable_foldl,
  toList: Foldable_toList,
  $$null: Foldable_null,
  length: Foldable_length,
  elem: Foldable_elem,
  sum: sum,
  product: product,
  maximum: maximum,
  minimum: minimum,
  concatMap: Foldable_concatMap,
  any: Foldable_any,
  all: Foldable_all,
  notElem: Foldable_notElem,
  find: Foldable_find
};

var empty = IntSet.empty;

var singleton = IntSet.singleton;

var fromList = IntSet.fromList;

var insert = IntSet.insert;

var $$delete = IntSet.$$delete;

var toggle = IntSet.toggle;

var member = IntSet.member;

var notMember = IntSet.notMember;

var size = IntSet.size;

var union = IntSet.union;

var difference = IntSet.difference;

var filter = IntSet.filter;

var map = IntSet.map;

var elems = IntSet.elems;

exports.Foldable = Foldable;
exports.empty = empty;
exports.singleton = singleton;
exports.fromList = fromList;
exports.insert = insert;
exports.$$delete = $$delete;
exports.toggle = toggle;
exports.member = member;
exports.notMember = notMember;
exports.size = size;
exports.union = union;
exports.difference = difference;
exports.filter = filter;
exports.map = map;
exports.elems = elems;
/* IntSet Not a pure module */
