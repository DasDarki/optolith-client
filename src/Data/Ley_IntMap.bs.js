// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Ley_Map$OptolithClient from "./Ley_Map.bs.js";

var compare = Caml_obj.caml_compare;

var IntMap = Ley_Map$OptolithClient.Make({
      compare: compare
    });

var Foldable = IntMap.Foldable;

var Traversable = IntMap.Traversable;

var $$null = IntMap.$$null;

var size = IntMap.size;

var member = IntMap.member;

var notMember = IntMap.notMember;

var lookup = IntMap.lookup;

var findWithDefault = IntMap.findWithDefault;

var empty = IntMap.empty;

var singleton = IntMap.singleton;

var insert = IntMap.insert;

var insertWith = IntMap.insertWith;

var insertWithKey = IntMap.insertWithKey;

var insertLookupWithKey = IntMap.insertLookupWithKey;

var $$delete = IntMap.$$delete;

var adjust = IntMap.adjust;

var adjustWithKey = IntMap.adjustWithKey;

var update = IntMap.update;

var updateWithKey = IntMap.updateWithKey;

var updateLookupWithKey = IntMap.updateLookupWithKey;

var alter = IntMap.alter;

var union = IntMap.union;

var map = IntMap.map;

var mapWithKey = IntMap.mapWithKey;

var foldrWithKey = IntMap.foldrWithKey;

var foldlWithKey = IntMap.foldlWithKey;

var elems = IntMap.elems;

var keys = IntMap.keys;

var assocs = IntMap.assocs;

var fromList = IntMap.fromList;

var fromArray = IntMap.fromArray;

var filter = IntMap.filter;

var filterWithKey = IntMap.filterWithKey;

var mapMaybe = IntMap.mapMaybe;

var mapMaybeWithKey = IntMap.mapMaybeWithKey;

var countBy = IntMap.countBy;

var countByM = IntMap.countByM;

var groupBy = IntMap.groupBy;

export {
  IntMap ,
  Foldable ,
  Traversable ,
  $$null ,
  size ,
  member ,
  notMember ,
  lookup ,
  findWithDefault ,
  empty ,
  singleton ,
  insert ,
  insertWith ,
  insertWithKey ,
  insertLookupWithKey ,
  $$delete ,
  adjust ,
  adjustWithKey ,
  update ,
  updateWithKey ,
  updateLookupWithKey ,
  alter ,
  union ,
  map ,
  mapWithKey ,
  foldrWithKey ,
  foldlWithKey ,
  elems ,
  keys ,
  assocs ,
  fromList ,
  fromArray ,
  filter ,
  filterWithKey ,
  mapMaybe ,
  mapMaybeWithKey ,
  countBy ,
  countByM ,
  groupBy ,
  
}
/* IntMap Not a pure module */
