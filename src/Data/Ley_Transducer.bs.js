// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Ley_List$OptolithClient from "./Ley_List.bs.js";

function $tilde$tilde(f, x) {
  return Curry._1(f, x);
}

function $less$$tilde(f, fold, x, acc) {
  return Curry._2(fold, Curry._1(f, x), acc);
}

function $less$amp$tilde(g, f) {
  return (function (param, param$1) {
      return Curry._2(g, Curry._1(f, param), param$1);
    });
}

function $tilde$less$less(pred, fold, x, acc) {
  if (Curry._1(pred, x)) {
    return Curry._2(fold, x, acc);
  } else {
    return acc;
  }
}

function $great$great$tilde(fold, pred) {
  return (function (param, param$1) {
      return $tilde$less$less(pred, fold, param, param$1);
    });
}

function transduceList(t, xs) {
  return Ley_List$OptolithClient.Foldable.foldr(Curry._1(t, Ley_List$OptolithClient.cons), /* [] */0, xs);
}

export {
  $tilde$tilde ,
  $less$$tilde ,
  $less$amp$tilde ,
  $tilde$less$less ,
  $great$great$tilde ,
  transduceList ,
  
}
/* No side effect */
