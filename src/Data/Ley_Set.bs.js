// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Ley_Function$OptolithClient = require("./Ley_Function.bs.js");

function Make(funarg) {
  var TypedSet = $$Set.Make(funarg);
  var foldr = function (f, initial, s) {
    return Curry._3(TypedSet.fold, f, s, initial);
  };
  var foldl = function (f, initial, s) {
    return Curry._3(TypedSet.fold, (function (param, param$1) {
                  return Ley_Function$OptolithClient.flip(f, param, param$1);
                }), s, initial);
  };
  var toList = TypedSet.elements;
  var length = TypedSet.cardinal;
  var elem = function (x) {
    return Curry._1(TypedSet.exists, (function (param) {
                  return Caml_obj.caml_equal(x, param);
                }));
  };
  var concatMap = function (f, s) {
    return Curry._3(TypedSet.fold, (function (x, acc) {
                  return Curry._2(TypedSet.union, acc, Curry._1(f, x));
                }), s, TypedSet.empty);
  };
  var any = function (pred, s) {
    return !Curry._2(TypedSet.for_all, (function (x) {
                  return !Curry._1(pred, x);
                }), s);
  };
  var all = function (pred) {
    return Curry._1(TypedSet.for_all, Curry.__1(pred));
  };
  var notElem = function (x, s) {
    return !Curry._2(TypedSet.exists, (function (param) {
                  return Caml_obj.caml_equal(x, param);
                }), s);
  };
  var find = function (pred, s) {
    return Curry._2(TypedSet.find_first_opt, pred, s);
  };
  var Foldable_null = TypedSet.is_empty;
  var Foldable = {
    foldr: foldr,
    foldl: foldl,
    toList: toList,
    $$null: Foldable_null,
    length: length,
    elem: elem,
    concatMap: concatMap,
    any: any,
    all: all,
    notElem: notElem,
    find: find
  };
  var insert = TypedSet.add;
  var $$delete = TypedSet.remove;
  var toggle = function (x, s) {
    if (Curry._2(TypedSet.exists, (function (param) {
              return Caml_obj.caml_equal(x, param);
            }), s)) {
      return Curry._2($$delete, x, s);
    } else {
      return Curry._2(insert, x, s);
    }
  };
  return {
          Foldable: Foldable,
          empty: TypedSet.empty,
          singleton: TypedSet.singleton,
          fromList: TypedSet.of_list,
          insert: insert,
          $$delete: $$delete,
          toggle: toggle,
          member: elem,
          notMember: notElem,
          size: length,
          union: TypedSet.union,
          difference: TypedSet.diff,
          filter: TypedSet.filter,
          map: TypedSet.map,
          elems: toList
        };
}

exports.Make = Make;
/* No side effect */
