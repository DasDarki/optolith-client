// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$String from "bs-platform/lib/es6/string.js";
import * as Ley_Map$OptolithClient from "./Ley_Map.bs.js";

var StrMap = Ley_Map$OptolithClient.Make({
      compare: $$String.compare
    });

var Foldable = StrMap.Foldable;

var Traversable = StrMap.Traversable;

var $$null = StrMap.$$null;

var size = StrMap.size;

var member = StrMap.member;

var notMember = StrMap.notMember;

var lookup = StrMap.lookup;

var findWithDefault = StrMap.findWithDefault;

var empty = StrMap.empty;

var singleton = StrMap.singleton;

var insert = StrMap.insert;

var insertWith = StrMap.insertWith;

var insertWithKey = StrMap.insertWithKey;

var insertLookupWithKey = StrMap.insertLookupWithKey;

var $$delete = StrMap.$$delete;

var adjust = StrMap.adjust;

var adjustWithKey = StrMap.adjustWithKey;

var update = StrMap.update;

var updateWithKey = StrMap.updateWithKey;

var updateLookupWithKey = StrMap.updateLookupWithKey;

var alter = StrMap.alter;

var union = StrMap.union;

var map = StrMap.map;

var mapWithKey = StrMap.mapWithKey;

var foldrWithKey = StrMap.foldrWithKey;

var foldlWithKey = StrMap.foldlWithKey;

var elems = StrMap.elems;

var keys = StrMap.keys;

var assocs = StrMap.assocs;

var fromList = StrMap.fromList;

var fromArray = StrMap.fromArray;

var filter = StrMap.filter;

var filterWithKey = StrMap.filterWithKey;

var mapMaybe = StrMap.mapMaybe;

var mapMaybeWithKey = StrMap.mapMaybeWithKey;

var countBy = StrMap.countBy;

var countByM = StrMap.countByM;

var groupBy = StrMap.groupBy;

export {
  StrMap ,
  Foldable ,
  Traversable ,
  $$null ,
  size ,
  member ,
  notMember ,
  lookup ,
  findWithDefault ,
  empty ,
  singleton ,
  insert ,
  insertWith ,
  insertWithKey ,
  insertLookupWithKey ,
  $$delete ,
  adjust ,
  adjustWithKey ,
  update ,
  updateWithKey ,
  updateLookupWithKey ,
  alter ,
  union ,
  map ,
  mapWithKey ,
  foldrWithKey ,
  foldlWithKey ,
  elems ,
  keys ,
  assocs ,
  fromList ,
  fromArray ,
  filter ,
  filterWithKey ,
  mapMaybe ,
  mapMaybeWithKey ,
  countBy ,
  countByM ,
  groupBy ,
  
}
/* StrMap Not a pure module */
